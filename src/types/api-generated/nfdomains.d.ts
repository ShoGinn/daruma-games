/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/info/openapi3.yaml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download ./pubfiles/openapi3.yaml
     * @description YAML document containing the API swagger definition
     */
    get: operations['info']['openapi3.yaml'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/version': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * version info
     * @description Returns version information for the service
     */
    get: operations['info#version'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * [DEPRECATED] Search for NFDs based on select lookup criteria
     * @description [DEPRECATED] Find NFDs based on owner and/or reservations, name search (prefix or substring), or verified property search.  For typical 'reverse-lookup' functionality see the getNFDsForAddresses method (/nfd/address?address=xx...).  Fetching a specific NFD, use nfd/{name}.  Prefix search is useful for interactive lookups.
     */
    get: operations['nfd#searchV1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/{nameOrID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a specific NFD by name or by its application ID
     * @description Get a specific NFD by name or by its application ID
     */
    get: operations['nfd#getNFD'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/activity': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch change activity for an NFD
     * @description Fetch change activity for an NFD, specifically general 'block-level' deltas for an NFD
     */
    get: operations['nfd#activity'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/address': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * [DEPRECATED] Reverse Address lookup
     * @description [DEPRECATED] Get all NFDs which have been explicitly linked to one or more verified [or unverified] Algorand address(es).  Unverified addresses will match but return as unverifiedCaAlgo array.  These should be treated specially and not have the same trust level as verified addresses as they can be falsely attributed.  The caAlgo array is what should be trusted for things like NFT creation addresses. For reverse lookups returning multiple NFDs, take the first one matching in caAlgo array.
     */
    get: operations['nfd#getNFDsForAddresses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/analytics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch NFD analytics via various filters
     * @description Fetch NFD analytics via various filters
     */
    get: operations['nfd#analytics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/auction': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all open auctions or those open for a particular name */
    get: operations['nfd#getOpenAuctions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/badges/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch badge information (donations/etc) for an NFD
     * @description Fetch badge information (ie: donations) for an NFD
     */
    get: operations['nfd#badges'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/browse': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Browse NFDs via various filters */
    get: operations['nfd#browse'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/consensus/leaders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * consensusLeaders nfd
     * @description Get top consensus leaders
     */
    get: operations['nfd#consensusLeaders'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/consensus/metrics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * consensusMetrics nfd
     * @description Get general metrics about Algorand consensus
     */
    get: operations['nfd#consensusMetrics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/contract/lock/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * contractLock nfd
     * @description Lock/Unlock an NFD contract - if locked, the contract can never being modified until unlocked again by the owner.
     */
    post: operations['nfd#contractLock'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/contract/upgrade/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * contractUpgrade nfd
     * @description Request upgrade of the contract on an NFD
     */
    post: operations['nfd#contractUpgrade'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/donations/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * donations nfd
     * @description Fetch donation activity for an NFD, totalling amounts sent 'to' designated donation accounts
     */
    get: operations['nfd#donations'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/donations/leaders/{address}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * donationLeaders nfd
     * @description [DEPRECATED] Get top donors to a specific account
     */
    get: operations['nfd#donationLeaders'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/donations/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * donationList nfd
     * @description [DEPRECATED] Fetch list of tracked Donation 'targets'.  Getting name/address for each.
     */
    get: operations['nfd#donationList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/escrowOffer/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * escrowOffer nfd
     * @description Make escrowed bid for a new 'floor' price of an ongoing auction.  Higher bidder refunds you, if price drops to your escrow, you win auction with it being reserved for you
     */
    post: operations['nfd#escrowOffer'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/isValid/{appID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * isValidNFD nfd
     * @description Determines if specified NFD Application ID is authentic
     */
    get: operations['nfd#isValidNFD'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/isValidASA/{asaID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * isValidASA nfd
     * @description Determines if specified NFD NFT ASA ID is authentic NFD
     */
    get: operations['nfd#isValidASA'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/kickoff': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * kickoff nfd
     * @description Kickoff NFD minting process, with user buying specified NFD (or kicking off auction) as appropriate.  Purchase price is set by TxnLab
     */
    post: operations['nfd#kickoff'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/links/addAddress/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * linkAddress nfd
     * @description Link one or more addresses to an NFD, adding to the reverse-address lookups as well as to this NFD.  SenderUid must be owner, and each added address must be able to be signed for.
     */
    post: operations['nfd#linkAddress'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/links/removeAddress/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * unlinkAddress nfd
     * @description UnLink one or more addresses to an NFD, adding to the reverse-address lookups as well as to this NFD.  SenderUid must be owner, and each added address must be able to be signed for.
     */
    post: operations['nfd#unlinkAddress'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/links/setPrimaryAddress/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * setPrimaryAddress nfd
     * @description Set which of the currently verified addresses should be the first in the list (swapping positions as necessary)
     */
    post: operations['nfd#setPrimaryAddress'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/links/setPrimaryNFD/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * setPrimaryNFD nfd
     * @description Set the specified NFD as the primary NFD to return for the specified address via its reverse lookup
     */
    post: operations['nfd#setPrimaryNFD'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/lookup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Reverse Address lookup with results returned per address
     * @description Get the primary NFD for an address.  Must be verified address, or if allowUnverified is set, it may match against an unverified address
     */
    get: operations['nfd#getLookup'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/nameSig/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * getNameSig nfd
     * @description Returns NameSig address for an NFD name (usable for V1 only)
     */
    get: operations['nfd#getNameSig'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/offer/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * offer nfd
     * @description Offer up an NFD for sale - specifying price and optionally an address it is reserved for.
     */
    post: operations['nfd#offer'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/partnerKickoff': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * partnerKickoff nfd
     * @description [PRIVATE] Kickoff NFD minting process, with user buying specified NFD (or kicking off auction) as appropriate.  Purchase price is set by TxnLab
     */
    post: operations['nfd#partnerKickoff'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/postOfferToOwner/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * postOfferToOwner nfd
     * @description Post an offer to buy to the owner of an NFD, offering up a particular amount with optional note for them to consider
     */
    post: operations['nfd#postOfferToOwner'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/purchase/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * purchase nfd
     * @description Purchase an NFD for sale - specifying buyer (to sign transaction) and price
     */
    post: operations['nfd#purchase'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/rescindOffer/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * rescindOffer nfd
     * @description Rescind offer of sale. Claiming NFD back for self, and removing it for sale.
     */
    post: operations['nfd#rescindOffer'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/revAddressSig/{address}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * getRevAddressSig nfd
     * @description Returns RevAddress address for an NFD name (usable for V1 only)
     */
    get: operations['nfd#getRevAddressSig'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/segment/leaders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * segmentLeaders nfd
     * @description Get top segment roots
     */
    get: operations['nfd#segmentLeaders'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/segment/lock/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Lock/Unlock an NFD segment - specifying open price if unlocking
     * @description Lock/Unlock an NFD segment - if locked, the segment only allows minted names created by the segment owner.  If unlocked, anyone can mint off the segment for the price (in USD) the owner sets
     */
    post: operations['nfd#segmentLock'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/segment/price/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns cost to mint a named segment off a particular root.
     * @description Buyer is used for validation if segment is allowed to be minted (locked vs unlocked). Can pass full segment name, or just root.
     */
    get: operations['nfd#segmentPrice'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/suggest/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * suggest nfd
     * @description Suggest NFDs to purchase
     */
    get: operations['nfd#suggest'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/totals': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * totals nfd
     * @description Fetch NFD summary data - results subject to change in the future
     */
    get: operations['nfd#totals'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/twitter/leaders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * twitterLeaders nfd
     * @description Get top twitter influencers
     */
    get: operations['nfd#twitterLeaders'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/update/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * updateAll nfd
     * @description Replace all NFD user-settable attributes with those passed-in, removing, adding and replacing on behalf of a particular sender (who must be the owner).  Returns transaction group of transactions to sign
     */
    put: operations['nfd#updateAll'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * updatePartial nfd
     * @description Set an attribute in an NFD on behalf of a particular sender (who must be the owner).  Can set user-defined fields, or clear verified fields (except v.ca*)
     */
    patch: operations['nfd#updatePartial'];
    trace?: never;
  };
  '/nfd/updateImage/{name}/{sender}/{which}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * updateImage nfd
     * @description Update the avatar or banner image associated with an NFD by uploading new image content
     */
    post: operations['nfd#updateImage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/v2/address': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Reverse Address lookup with results returned per address
     * @description Get all NFDs which have been explicitly linked to one or more verified [or unverified] Algorand address(es).  Unverified addresses will match but return as unverifiedCaAlgo array.  These should be treated specially and not have the same trust level as verified addresses as they can be falsely attributed.  The caAlgo array is what should be trusted for things like NFT creation addresses. For reverse lookups returning multiple NFDs, the first result should be used.
     */
    get: operations['nfd#getNFDsForAddressesV2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/v2/donations/leaders/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * donationLeadersV2 nfd
     * @description Get top donors to a specific NFD Donation target
     */
    get: operations['nfd#donationLeadersV2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/v2/donations/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * donationListV2 nfd
     * @description Fetch list of tracked Donation NFD 'targets'.
     */
    get: operations['nfd#donationListV2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/v2/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search NFDs via various filters
     * @description Search NFDs via various filters
     */
    get: operations['nfd#searchV2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/vault/lock/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * vaultOptInLock nfd
     * @description Lock/Unlock ability for the specified NFD Vault to auto opt-in to assets, allowing airdrops from other accounts
     */
    post: operations['nfd#vaultOptInLock'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/vault/sendFrom/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * sendFromVault nfd
     * @description Send an amount of an asset [0 == ALGO] to another account FROM the NFD Vault.  Only owner of NFD can send.
     */
    post: operations['nfd#sendFromVault'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/vault/sendTo/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * sendToVault nfd
     * @description Provide transaction to send an asset owned by sender account to an NFD vault.  Call to have opt-in to vault will be included if necessary.  Callable by NFD owner, or if Opt-in is UNLOCKED (or asset already opted-in), anyone can call
     */
    post: operations['nfd#sendToVault'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/verify/confirm/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * verifyConfirm nfd
     * @description Verify a particular piece of data on, or off-chain.  Each verification differs in its requirements
     */
    post: operations['nfd#verifyConfirm'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/nfd/verify/request': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * verifyRequest nfd
     * @description Request Verification for particular piece of data on, or off-chain.  Each verification differs in its requirements. Returns data to be used in challenge
     */
    post: operations['nfd#verifyRequest'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * @description ConsensusRecord contains information about an account that participated in consensus
     * @example {
     *       "account": "Laboriosam voluptas eligendi ad non.",
     *       "lastPropBlock": 13968623053551817000,
     *       "lastPropTime": "2014-12-25T04:05:37Z",
     *       "lastVoteBlock": 3310900630615918000,
     *       "lastVoteTime": "1994-04-24T06:57:55Z",
     *       "linkType": "Facilis qui voluptas nobis.",
     *       "ownerAccount": "Aut iusto autem quis nesciunt aspernatur.",
     *       "pctOfOnline": 0.14533242380092715,
     *       "proposals": 19889758998449736,
     *       "rank": 992855250848434600,
     *       "votes": 15901243050542858000
     *     }
     */
    ConsensusRecord: {
      /** @example Cumque id qui. */
      account: string;
      /** @example 3922688899369760300 */
      lastPropBlock?: number;
      /**
       * Format: date-time
       * @example 1995-08-24T04:00:50Z
       */
      lastPropTime?: string;
      /** @example 4422831565274384400 */
      lastVoteBlock?: number;
      /**
       * Format: date-time
       * @example 1977-03-31T20:46:49Z
       */
      lastVoteTime?: string;
      /** @example Quam dicta illo sunt adipisci nulla neque. */
      linkType?: string;
      /** @example Soluta sequi aliquid odio aut fugiat. */
      ownerAccount: string;
      /**
       * Format: double
       * @example 0.29160110325763455
       */
      pctOfOnline: number;
      /** @example 9298662486770821000 */
      proposals?: number;
      /**
       * Format: int64
       * @example 8135902716985545000
       */
      rank?: number;
      /** @example 7158485645635746000 */
      votes?: number;
    };
    /** @example {
     *       "lock": true,
     *       "sender": "DZFDXYKPRPEXY6O7IGTX3H7TWZJXUZYE7ON5BZ3RQMV3UXOXTZTCIJSW5M"
     *     } */
    ContractLockRequestBody: {
      /**
       * @description Whether to lock (true), or unlock (false)
       * @example true
       */
      lock: boolean;
      /**
       * @description SenderUid of transaction - needs to be owner of NFD
       * @example SEDWDQA7HZBFUFQFDCDDIXVY6EFRNHAOERUIK6GQQBULVJ5AC3GU2E66MY
       */
      sender: string;
    };
    /**
     * @description Donation contains basic information about donation totals to specific addresses from accounts related to an NFD
     * @example {
     *       "address": "5VLYO57QEYSN35AFSTEABNXYZN2ZSWC7AGNBGXRFACILCTLICDI7AKN5CA",
     *       "total": 5024928433713598000
     *     }
     */
    Donation: {
      /**
       * @description SenderUid or Receiver Algorand address depending on request
       * @example 65LD4RUVA47APCDY4EQUZEJ77NN5WDPTGA3RSV3X27HRE34UP52KD3RFYA
       */
      address: string;
      /**
       * @description Total donation in microAlgos
       * @example 16508203838042472000
       */
      total: number;
    };
    /**
     * @description Name and account defined as a donation target
     * @example {
     *       "address": "KDDVD5CDYFEBP6B6GFFK4YYGWZMEOGNIWTZHCTSMCO5F3RQ4U6YYZTOAPA",
     *       "image": "Accusamus qui tenetur et enim sit porro.",
     *       "name": "Delectus doloremque odit consequatur rerum.",
     *       "nfd": "0"
     *     }
     */
    DonationAccount: {
      /**
       * @description Algorand account address for this donation account
       * @example CDUZ5ZEIFGXJCLWGSI2G35TTHZJQ3S754432SHIFGURNWEDIMSR76QF64U
       */
      address: string;
      /**
       * @description url of image for this donation target
       * @example A praesentium cumque corporis in natus.
       */
      image: string;
      /** @example Blanditiis sint eos debitis similique. */
      name: string;
      /**
       * @description name of NFD for this cause
       * @example jqf
       */
      nfd: string;
    };
    /** @example {
     *       "fault": true,
     *       "id": "123abc",
     *       "message": "parameter 'p' must be an integer",
     *       "name": "bad_request",
     *       "temporary": true,
     *       "timeout": true
     *     } */
    Error: {
      /**
       * @description Is the error a server-side fault?
       * @example false
       */
      fault: boolean;
      /**
       * @description ID is a unique identifier for this particular occurrence of the problem.
       * @example 123abc
       */
      id: string;
      /**
       * @description Message is a human-readable explanation specific to this occurrence of the problem.
       * @example parameter 'p' must be an integer
       */
      message: string;
      /**
       * @description Name is the name of this class of errors.
       * @example bad_request
       */
      name: string;
      /**
       * @description Is the error temporary?
       * @example true
       */
      temporary: boolean;
      /**
       * @description Is the error a timeout?
       * @example true
       */
      timeout: boolean;
    };
    /** @example {
     *       "buyer": "LFHCFFEPEF5YZQNPNWSBUI4TQSA6YF7FCVYSMTZCQEXGHYWW2HMMSRWDBQ",
     *       "offer": 54939381371823
     *     } */
    EscrowOfferRequestBody: {
      /** @example DGF6X25757OIUFPTODLS6TULKZLH5SBWNWC5O3RFAG5DCAVFKW6W22E4BA */
      buyer: string;
      /**
       * @description Amount in microAlgo to escrow as new floor price
       * @example 73689395994218
       */
      offer: number;
    };
    /**
     * @description Whether NFD NFT ASA ID is for authentic NFD
     * @example {
     *       "appID": 17813671533917780000,
     *       "isValid": true,
     *       "message": "Sed tenetur a.",
     *       "name": "Voluptas enim quo."
     *     }
     */
    IsValidASAResponseBody: {
      /** @example 8205510662836012000 */
      appID: number;
      /** @example false */
      isValid: boolean;
      /** @example Animi nemo odit qui. */
      message: string;
      /** @example Ipsum voluptates ad occaecati voluptas voluptatem. */
      name: string;
    };
    /**
     * @description Whether NFD App ID is for authentic NFD
     * @example {
     *       "isValid": false,
     *       "message": "Eos vitae culpa.",
     *       "name": "Est facere asperiores iste incidunt.",
     *       "sigNameAddress": "Facere impedit iure."
     *     }
     */
    IsValidNFDResponseBody: {
      /** @example true */
      isValid: boolean;
      /** @example Odit ut deleniti voluptatem quod adipisci ratione. */
      message: string;
      /** @example Nostrum deserunt qui maxime est explicabo. */
      name: string;
      /** @example Quia culpa qui aperiam distinctio et possimus. */
      sigNameAddress?: string;
    };
    /** @example {
     *       "buyer": "JZEZLXLBA7OBYYGO4PB3UDIVMKKUVU64GIHHV4UKQRWO4GGL7SNK22ZXS4",
     *       "name": "5"
     *     } */
    KickoffRequestBody: {
      /** @example 7VCT44IMZ3WASCVCQBFC3XXMJPVVALZPAHHM7W2UL6YQGEUOV4YCOLHSFM */
      buyer: string;
      /** @example aa */
      name: string;
    };
    /** @example {
     *       "address": [
     *         "GIRF3DYTOHWP6KPGNOWL3QKGKM7KGZIAMYBHWUE4ZPEIHBFHGXXIIEVQV4",
     *         "WF2LV2IL3A4ED3QRK2YAYYWH77HMAU7WLWE3WYVWIYKX7SZCLKISIU44FQ",
     *         "NBGVYQSLWMXZ7EGACQJY33HOYDK7QP5CJKDHLEYWZDK22E6VYXQEGY7RVY"
     *       ],
     *       "sender": "GCMUWKBIK6R5MZNXEK63XULQQFUBN6SBENVI2X456FEKSTD3EVZYHYLAZY"
     *     } */
    LinkAddressRequestBody: {
      /**
       * @description Address(es) to link to the NFD (must be able to sign for each)
       * @example [
       *       "IVSXKDRC6V4DWRD56XXQREMHMELD4DHTV7VR7CHHFSRFRLCT5QO5K5AWTA",
       *       "TM7XOY3EKHFTQSDR5EJ2DJMV3GN3V3WOMUTYLMII7HGWCAE5VNU2WHQD3U",
       *       "XLT64OURSRRXODDO6BUW67N5ZMTHCVDI65ZB5QZYCV6GHFMNCKO7YPVAJQ"
       *     ]
       */
      address: string[];
      /**
       * @description Address that will be signing the returned transactions.  Should be owner of NFD
       * @example OSEM43MBSYQC3E5SCQHMOQQGXLXANC5U2JRZI2ZYA6EVA2PMAQX7Z65YM4
       */
      sender: string;
    };
    /**
     * @description NFD contains all known information about an NFD record
     * @example {
     *       "appID": 1000000,
     *       "asaID": 17283560381875704000,
     *       "avatarOutdated": false,
     *       "caAlgo": [
     *         "ZMS54Q24CTOCED34Q3M3DZTZSLCLAUGJJRKZ3FCX57VBGGXOPHA7H5JTAE",
     *         "AWYRKLO2Z6FN6XCTSQNJNVA2ET3E6NK7PSPLGM7TEVG4F2PRN7KUGHPJ5I"
     *       ],
     *       "cache-control": "Et illo eos ab tenetur quam.",
     *       "category": "common",
     *       "currentAsOfBlock": 11146349640734454000,
     *       "depositAccount": "VAX3TXBKVSDNAMJJMQ2FO22MMJTB7JIHMS56FV4CZUONU34VOLQLMRJMCQ",
     *       "etag": "Adipisci nihil.",
     *       "metaTags": [
     *         "Debitis impedit cum consequatur fuga.",
     *         "Odit eos qui dolores.",
     *         "Quos deserunt."
     *       ],
     *       "name": "Aspernatur qui qui qui rerum.",
     *       "nfdAccount": "RRAWEMCJX4DL4FFQBX2NEXQ42AGES4KKCGVKW4DGZG6YMYTOG4DA5L4O2Y",
     *       "owner": "F2ETKXWNWPBJVMHEV7OGDH2EDIBOOZBAEXOZRGW465UMHUBBHSN2SUVFJQ",
     *       "parentAppID": 1000000,
     *       "properties": {
     *         "internal": {
     *           "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *           "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *           "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *         },
     *         "userDefined": {
     *           "g": "Eveniet architecto consequatur."
     *         },
     *         "verified": {
     *           "caAlgo": "Nostrum ea."
     *         }
     *       },
     *       "reservedFor": "APFRPUMMWJVCFTYVVOZ3BMULNF4AORRWOY5KEKR6QQAXMXVVIAAVJKENII",
     *       "saleType": "auction",
     *       "sellAmount": 7442342884391152000,
     *       "seller": "4EZRET5XVGDWUTVEZKM3GSJJRG3T6HH5THZY2P2LF7XCDEXHABDVAHOE5U",
     *       "sigNameAddress": "WEWXWJ3SJKAX2A6WZO7KSI5NQVTTNX6IM4DT33CJWDNQQIIBODIBVCFKK4",
     *       "state": "minting",
     *       "tags": [
     *         "Magni ea est odit nulla soluta commodi.",
     *         "Debitis recusandae quaerat esse.",
     *         "Quidem et cumque natus dolores at ducimus.",
     *         "Deserunt soluta tenetur fuga."
     *       ],
     *       "timeChanged": "1982-06-30T16:22:36Z",
     *       "timeCreated": "1984-02-22T12:34:17Z",
     *       "timePurchased": "1970-08-06T17:11:36Z",
     *       "unverifiedCa": {
     *         "btc": [
     *           "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *         ]
     *       },
     *       "unverifiedCaAlgo": [
     *         "WRA664QZJUBCUGR4KXWOZ5STPXAIYR6X2YKASHB7HZ3RA5IF2K5URBVTNY",
     *         "JUCFWFZMD672WQOKU6M6ZAFNKFGAKZY4SRU2QNYSUXJ4RRQQBI6WHKDEFM",
     *         "Q7BVHTR24KUHOTNUXBNNMPQDVLKWAOELKOLIH4IJMXCSVT35PRZYM7SAX4",
     *         "ZCZMB57TRWKN4U756JPVMI5Q2FQTHUQFDRGCFTE4QQKKW5VWUAH3C7KH3U"
     *       ]
     *     }
     */
    NFD: {
      /**
       * @description NFD Application ID
       * @example 1000000
       */
      appID?: number;
      /**
       * @description NFD ASA ID
       * @example 5232525801923379000
       */
      asaID?: number;
      /**
       * @description Whether the verified Avatar set in this NFD is newer (arc19) then is set into the NFD. This will only be present on direct NFD fetch and if true
       * @example true
       */
      avatarOutdated?: boolean;
      /**
       * @description Verified Algorand addresses for this NFD
       * @example [
       *       "W2KLZAJ4JV3ZYSDB7HZH23QFZVSXVZQLUOCC7TAFHNOBQOSVNIMFNM2CLE",
       *       "PZYPQJXNJQQLHUY72IDQHNEAOW3XLUM3UYOSREKJVM24IYQDNH3IXWYOL4"
       *     ]
       */
      caAlgo?: string[];
      /**
       * @description Cache-Control header
       * @example Soluta exercitationem quidem.
       */
      'cache-control'?: string;
      /**
       * @example common
       * @enum {string}
       */
      category?: 'curated' | 'premium' | 'common';
      /**
       * @description Round this data was last fetched from
       * @example 9264431026133887000
       */
      currentAsOfBlock?: number;
      /**
       * @description account wallets should send funds to - precedence is: caAlgo[0], unverifiedCaAlgo[0], owner
       * @example ATPY4JWQHPSEH6Y67L53KN4MMQDJIKBHTC66FW5MN4CXRVU6BQIV3BM7RA
       */
      depositAccount?: string;
      /**
       * @description ETag
       * @example Id quia voluptas dolorem eius natus.
       */
      etag?: string;
      /**
       * @description Tags set by the system for tracking/analytics
       * @example [
       *       "Est velit excepturi tenetur ut.",
       *       "Sed maiores omnis voluptatem."
       *     ]
       */
      metaTags?: string[];
      /** @example Itaque aliquam et minus quidem animi id. */
      name: string;
      /** @example VNNF3VN2FSTBZW5XVGLQ2UL3AWQILT5NGJPNC2EBLQLQGV45EOO2DTNXWI */
      nfdAccount?: string;
      /**
       * @description Owner of NFD
       * @example BIJL4WAG22ZK4CEDH72PGD3VTFDC27ZCUGGFOR4PBXYBAFWX5NDYKQUGAQ
       */
      owner?: string;
      /**
       * @description NFD Application ID of Parent if this is a segment
       * @example 1000000
       */
      parentAppID?: number;
      properties?: components['schemas']['NFDProperties'];
      /**
       * @description Reserved owner of NFD
       * @example HNYSZ6CYJHHP7LFP6XTSIQSTE5DKUVBIVXISUXHFZ3AHG2FR6FSJ7HWLDM
       */
      reservedFor?: string;
      /**
       * @example buyItNow
       * @enum {string}
       */
      saleType?: 'auction' | 'buyItNow';
      /**
       * @description amount NFD is being sold for (microAlgos)
       * @example 5314224679817494000
       */
      sellAmount?: number;
      /**
       * @description RecipientUid of NFD sales
       * @example FQID6PZ6AO2LQZCK6QGPTZ4EYSBDLTZULDFDXQSFHWVJGMBXZACXBTTYLM
       */
      seller?: string;
      /** @example A3SG3CICAV2CN37C4HVHPWANTOMN7C5TWAY4IFRMWADG5YMW6Q4ZW6CZY4 */
      sigNameAddress?: string;
      /**
       * @example owned
       * @enum {string}
       */
      state?: 'available' | 'minting' | 'reserved' | 'forSale' | 'owned';
      /**
       * @description Tags assigned to this NFD
       * @example [
       *       "Quasi voluptatem quisquam sed.",
       *       "Quis quo sit eius saepe et.",
       *       "Expedita enim officia eos."
       *     ]
       */
      tags?: string[];
      /**
       * Format: date-time
       * @example 1988-01-22T04:54:02Z
       */
      timeChanged?: string;
      /**
       * Format: date-time
       * @example 1974-07-04T22:46:46Z
       */
      timeCreated?: string;
      /**
       * Format: date-time
       * @example 1996-06-17T01:18:52Z
       */
      timePurchased?: string;
      /**
       * @description Unverified (non-algo) Crypto addresses for this NFD
       * @example {
       *       "btc": [
       *         "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
       *       ]
       *     }
       */
      unverifiedCa?: {
        [key: string]: string[] | undefined;
      };
      /**
       * @description Unverified Algorand addresses for this NFD
       * @example [
       *       "EEFALQ6NAFR4OBLTYBA7L7XQQ64XNBXRAQO5OOF2TDUB2XGMVIYYORHMPE",
       *       "B3UELAJA4ZS6JWVM7Z5WPW2TUGMWTLYDYTNQHHICHIK7BLCL5P5FAZIINY"
       *     ]
       */
      unverifiedCaAlgo?: string[];
    };
    /**
     * @description NFDActivity contains the property changes made in a particular NFD contract update call
     * @example {
     *       "block": 16442127037861276000,
     *       "cache-control": "Est vel necessitatibus quo qui quia.",
     *       "changes": {
     *         "Voluptates voluptatem expedita rerum similique.": "Quis reprehenderit."
     *       },
     *       "etag": "Odit est incidunt aperiam distinctio ipsa cum.",
     *       "match-check": "Dolores reprehenderit esse et praesentium repellat beatae.",
     *       "name": "Expedita minus.",
     *       "timeChanged": "1996-08-08T22:06:22Z"
     *     }
     */
    NFDActivity: {
      /**
       * @description Algorand Block number of change
       * @example 7559355722808412000
       */
      block: number;
      /** @example Sint fugit quo ab omnis. */
      'cache-control'?: string;
      /**
       * @description Changed properties
       * @example {
       *       "A laboriosam dignissimos dolorem tempore provident.": "Ipsam ipsam hic similique temporibus nihil est.",
       *       "Sed quod amet.": "Quod animi.",
       *       "Temporibus sit vero aut ea non.": "Vero quia ducimus rerum eos et quas."
       *     }
       */
      changes?: {
        [key: string]: string | undefined;
      };
      /** @example Aut aut. */
      etag?: string;
      /**
       * @description Not returned, used in tagging for response to indicate if-none-match etag matched
       * @example Quod quas quas ea.
       */
      'match-check'?: string;
      /**
       * @description NFD Name
       * @example Qui quis soluta at repudiandae consequatur.
       */
      name: string;
      /**
       * Format: date-time
       * @example 1993-07-25T12:39:23Z
       */
      timeChanged: string;
    };
    /**
     * @description NFDAnalyticEvent contains a price history record for a point in time of an NFD
     * @example {
     *       "block": 2702987264370643500,
     *       "buyer": "Earum illo.",
     *       "carryCost": 14881039799154373000,
     *       "category": "premium",
     *       "currentOwner": "Vero id qui id ad.",
     *       "event": "canceledSale",
     *       "groupID": "Ea consequatur molestias dignissimos itaque et pariatur.",
     *       "metaTags": [
     *         "Pariatur sed ut.",
     *         "Sit dignissimos voluptatibus nihil quia rem sunt.",
     *         "Voluptas quas cum.",
     *         "Dolorem voluptatem doloribus et enim explicabo."
     *       ],
     *       "name": "Cupiditate voluptatem iure quos ea.",
     *       "note": "Corporis itaque qui.",
     *       "saleType": "buyItNow",
     *       "seller": "Sequi eaque quis magni nihil earum nemo."
     *     }
     */
    NFDAnalyticEvent: {
      /** @example 8522550858469908000 */
      block?: number;
      /** @example Rerum odit modi occaecati ex placeat incidunt. */
      buyer?: string;
      /**
       * @description extra amount paid to cover minimum balance requirements - add to price to determine total amount paid
       * @example 8634159512739939000
       */
      carryCost?: number;
      /**
       * @example curated
       * @enum {string}
       */
      category?: 'curated' | 'premium' | 'common';
      /**
       * @description NFD current owner - if set via includeOwner property
       * @example Qui laboriosam sint illo quo maxime.
       */
      currentOwner?: string;
      /**
       * @example sold
       * @enum {string}
       */
      event?:
        | 'minted'
        | 'offeredForSale'
        | 'canceledSale'
        | 'escrowedOffer'
        | 'sold'
        | 'postedOffer';
      /** @example Omnis animi veritatis dolores. */
      groupID?: string;
      /** @example [
       *       "Provident a nesciunt a maiores.",
       *       "Molestiae aspernatur est nam architecto."
       *     ] */
      metaTags?: string[];
      /**
       * @description NFD Name
       * @example Aliquam sit eligendi est magnam.
       */
      name?: string;
      /** @example Commodi sunt rem sunt amet. */
      note?: string;
      /**
       * @example buyItNow
       * @enum {string}
       */
      saleType?: 'auction' | 'buyItNow';
      /** @example Maxime explicabo non cumque enim accusantium aut. */
      seller?: string;
    };
    /**
     * @description NFDAnalyticRecord is an NFD Analytics record in a time-series collection, with timestamp, price, and event data for that point in time.
     * @example {
     *       "data": {
     *         "block": 4080463168315892000,
     *         "buyer": "Aliquid possimus.",
     *         "carryCost": 15173802888615287000,
     *         "category": "curated",
     *         "currentOwner": "Pariatur et reprehenderit porro placeat odit voluptatem.",
     *         "event": "sold",
     *         "groupID": "Sit voluptas.",
     *         "metaTags": [
     *           "Voluptates officiis quibusdam eum natus cumque.",
     *           "Quia corporis minima rerum porro impedit alias.",
     *           "Vel molestias architecto alias.",
     *           "Ut necessitatibus vero rem voluptas porro."
     *         ],
     *         "name": "Eum quia odio.",
     *         "note": "Commodi maiores.",
     *         "saleType": "auction",
     *         "seller": "Corrupti natus et laboriosam omnis quibusdam."
     *       },
     *       "price": 5765107314433932000,
     *       "priceUsd": 0.36786814605666696,
     *       "timestamp": "1983-08-11T05:42:52Z"
     *     }
     */
    NFDAnalyticRecord: {
      data?: components['schemas']['NFDAnalyticEvent'];
      /**
       * @description price of event in microAlgos
       * @example 11697009726031321000
       */
      price?: number;
      /**
       * Format: double
       * @description price of event in USD
       * @example 0.39705575250002745
       */
      priceUsd?: number;
      /**
       * Format: date-time
       * @example 1970-05-20T09:48:50Z
       */
      timestamp?: string;
    };
    /** @example {
     *       "match-check": "Ipsum rem.",
     *       "results": [
     *         {
     *           "data": {
     *             "block": 4080463168315892000,
     *             "buyer": "Aliquid possimus.",
     *             "carryCost": 15173802888615287000,
     *             "category": "curated",
     *             "currentOwner": "Pariatur et reprehenderit porro placeat odit voluptatem.",
     *             "event": "sold",
     *             "groupID": "Sit voluptas.",
     *             "metaTags": [
     *               "Voluptates officiis quibusdam eum natus cumque.",
     *               "Quia corporis minima rerum porro impedit alias.",
     *               "Vel molestias architecto alias.",
     *               "Ut necessitatibus vero rem voluptas porro."
     *             ],
     *             "name": "Eum quia odio.",
     *             "note": "Commodi maiores.",
     *             "saleType": "auction",
     *             "seller": "Corrupti natus et laboriosam omnis quibusdam."
     *           },
     *           "price": 7391632170362898000,
     *           "priceUsd": 0.8581620803938366,
     *           "timestamp": "1996-07-13T17:24:30Z"
     *         },
     *         {
     *           "data": {
     *             "block": 4080463168315892000,
     *             "buyer": "Aliquid possimus.",
     *             "carryCost": 15173802888615287000,
     *             "category": "curated",
     *             "currentOwner": "Pariatur et reprehenderit porro placeat odit voluptatem.",
     *             "event": "sold",
     *             "groupID": "Sit voluptas.",
     *             "metaTags": [
     *               "Voluptates officiis quibusdam eum natus cumque.",
     *               "Quia corporis minima rerum porro impedit alias.",
     *               "Vel molestias architecto alias.",
     *               "Ut necessitatibus vero rem voluptas porro."
     *             ],
     *             "name": "Eum quia odio.",
     *             "note": "Commodi maiores.",
     *             "saleType": "auction",
     *             "seller": "Corrupti natus et laboriosam omnis quibusdam."
     *           },
     *           "price": 7391632170362898000,
     *           "priceUsd": 0.8581620803938366,
     *           "timestamp": "1996-07-13T17:24:30Z"
     *         }
     *       ],
     *       "total": 2590629506137790000
     *     } */
    NFDAnalyticRecords: {
      /**
       * @description Not returned, used in tagging for response to indicate if-none-match etag matched
       * @example Atque expedita culpa illo necessitatibus.
       */
      'match-check'?: string;
      /** @example [
       *       {
       *         "data": {
       *           "block": 4080463168315892000,
       *           "buyer": "Aliquid possimus.",
       *           "carryCost": 15173802888615287000,
       *           "category": "curated",
       *           "currentOwner": "Pariatur et reprehenderit porro placeat odit voluptatem.",
       *           "event": "sold",
       *           "groupID": "Sit voluptas.",
       *           "metaTags": [
       *             "Voluptates officiis quibusdam eum natus cumque.",
       *             "Quia corporis minima rerum porro impedit alias.",
       *             "Vel molestias architecto alias.",
       *             "Ut necessitatibus vero rem voluptas porro."
       *           ],
       *           "name": "Eum quia odio.",
       *           "note": "Commodi maiores.",
       *           "saleType": "auction",
       *           "seller": "Corrupti natus et laboriosam omnis quibusdam."
       *         },
       *         "price": 7391632170362898000,
       *         "priceUsd": 0.8581620803938366,
       *         "timestamp": "1996-07-13T17:24:30Z"
       *       },
       *       {
       *         "data": {
       *           "block": 4080463168315892000,
       *           "buyer": "Aliquid possimus.",
       *           "carryCost": 15173802888615287000,
       *           "category": "curated",
       *           "currentOwner": "Pariatur et reprehenderit porro placeat odit voluptatem.",
       *           "event": "sold",
       *           "groupID": "Sit voluptas.",
       *           "metaTags": [
       *             "Voluptates officiis quibusdam eum natus cumque.",
       *             "Quia corporis minima rerum porro impedit alias.",
       *             "Vel molestias architecto alias.",
       *             "Ut necessitatibus vero rem voluptas porro."
       *           ],
       *           "name": "Eum quia odio.",
       *           "note": "Commodi maiores.",
       *           "saleType": "auction",
       *           "seller": "Corrupti natus et laboriosam omnis quibusdam."
       *         },
       *         "price": 7391632170362898000,
       *         "priceUsd": 0.8581620803938366,
       *         "timestamp": "1996-07-13T17:24:30Z"
       *       }
       *     ] */
      results: Array<components['schemas']['NFDAnalyticRecord']>;
      /**
       * @description total number of results, with data containing paged amount based on offset/limit
       * @example 13445459823386552000
       */
      total: number;
    };
    /** @example {
     *       "ceilingPrice": 8357107333119665000,
     *       "currentPrice": 13224243683430130000,
     *       "endTime": "2004-07-30T16:44:25Z",
     *       "floorPrice": 8986765095812710000,
     *       "name": "ow",
     *       "newEndTime": "2005-10-03T04:49:11Z",
     *       "newFloorPrice": 14419591299239125000,
     *       "startTime": "2006-04-23T13:12:33Z"
     *     } */
    NFDAuction: {
      /**
       * @description Price in microAlgos
       * @example 6421826204599884000
       */
      ceilingPrice: number;
      /**
       * @description Price in microAlgos
       * @example 3405365048032037400
       */
      currentPrice?: number;
      /**
       * Format: date-time
       * @example 2015-09-10T21:55:50Z
       */
      endTime: string;
      /**
       * @description Price in microAlgos
       * @example 3202806545013943300
       */
      floorPrice: number;
      /** @example b */
      name: string;
      /**
       * Format: date-time
       * @example 2011-02-01T22:19:38Z
       */
      newEndTime?: string;
      /**
       * @description Escrowed floor price in microAlgos
       * @example 3515042502763046000
       */
      newFloorPrice?: number;
      /**
       * Format: date-time
       * @example 1980-08-11T19:36:12Z
       */
      startTime: string;
    };
    /** @example {
     *       "auctionInfo": {
     *         "ceilingPrice": 11708759536472134000,
     *         "currentPrice": 17868376420863937000,
     *         "endTime": "1997-08-10T22:32:57Z",
     *         "floorPrice": 3642865741581330000,
     *         "name": "6ew",
     *         "newEndTime": "1993-11-19T12:05:37Z",
     *         "newFloorPrice": 17667364992775911000,
     *         "startTime": "1977-04-24T23:13:36Z"
     *       },
     *       "changePerMinute": 12255615248301949000,
     *       "elapsedMinutes": 1135701530001315200,
     *       "price": 7851870975265388000,
     *       "totalMinutes": 2244182432175799600
     *     } */
    NFDAuctionAndPrice: {
      auctionInfo: components['schemas']['NFDAuction'];
      /**
       * @description Change in price per minute
       * @example 11187946497681078000
       */
      changePerMinute?: number;
      /**
       * Format: int64
       * @description Minutes elapsed so far in Auction
       * @example 8405930107347328000
       */
      elapsedMinutes?: number;
      /**
       * @description Current price in microAlgos
       * @example 15400596427272880000
       */
      price?: number;
      /**
       * Format: int64
       * @description Total number of minutes in Auction
       * @example 5890103006915589000
       */
      totalMinutes?: number;
    };
    /**
     * @description NFDProperties contains the expanded metadata stored within an NFD contracts' global-state
     * @example {
     *       "internal": {
     *         "Et doloremque modi voluptates ut cum.": "Nobis illum voluptas magni.",
     *         "Labore dolorem totam libero sequi eum.": "Velit qui."
     *       },
     *       "userDefined": {
     *         "r": "Temporibus sed."
     *       },
     *       "verified": {
     *         "caAlgo": "A soluta excepturi in saepe.",
     *         "my": "Voluptatem ea inventore temporibus ducimus.",
     *         "tz": "Optio explicabo cum."
     *       }
     *     }
     */
    NFDProperties: {
      /**
       * @description Internal properties
       * @example {
       *       "Optio nesciunt in minima.": "Et hic rerum maiores minus.",
       *       "Quo eos itaque voluptas.": "Assumenda cumque occaecati.",
       *       "Quos fugiat dolor.": "Est itaque."
       *     }
       */
      internal?: {
        [key: string]: string | undefined;
      };
      /**
       * @description User properties
       * @example {
       *       "u": "Odit quisquam sapiente numquam ut architecto.",
       *       "ubr": "Molestias et est vel est."
       *     }
       */
      userDefined?: {
        [key: string]: string | undefined;
      };
      /**
       * @description Verified properties
       * @example {
       *       "ohikq": "Qui qui porro pariatur voluptatem alias."
       *     }
       */
      verified?: {
        [key: string]: string | undefined;
      };
    };
    /** @example {
     *       "appID": 1000000,
     *       "asaID": 16083002987772897000,
     *       "avatarOutdated": true,
     *       "caAlgo": [
     *         "G2AQRK3Y4BR6I7N5KFYWCYGAIHSKWUDX7VY5AB3SPIUMGMBAUQXQ45TXHM",
     *         "MLDYRWOVW6QHOOJWULEAATG5Y4OEBATJQTZGZFZK3WY3NMUME3RGSFNIWA",
     *         "WPX4TDGFLDOPM4E4N4RTTLVQC5GDXCMKPUWGI7VUAHWP64G5EMIMOOSZYE"
     *       ],
     *       "category": "premium",
     *       "currentAsOfBlock": 14965131908139481000,
     *       "depositAccount": "DVKCU4YLBJOUPLIIOJCBDBVYTFFQAAXKV5WQRUN7FHZPM6V5EJ2HQJDQIM",
     *       "match-check": "Eaque voluptas.",
     *       "metaTags": [
     *         "Aperiam aperiam voluptas qui cum asperiores et.",
     *         "Placeat qui.",
     *         "Amet dolorum dolor quam sit."
     *       ],
     *       "name": "Mollitia autem omnis voluptas.",
     *       "nfdAccount": "E3QG6J5BXBED5DPHIYND5BEEFMVFGANGGT776QRWUGI2HZXHKC5WMXWBOI",
     *       "owner": "I6OCBPPQ3QCH4YAKNHYSMUV557UXZEJMCSI3KDLY7YMVFQKMEBKODPACFQ",
     *       "parentAppID": 1000000,
     *       "properties": {
     *         "internal": {
     *           "Consequatur vel.": "Dolorum reiciendis."
     *         },
     *         "userDefined": {
     *           "s": "Delectus sint accusamus."
     *         },
     *         "verified": {
     *           "k": "Et velit et qui doloremque commodi.",
     *           "p": "Repellendus perspiciatis ad itaque exercitationem rerum.",
     *           "y": "Nulla tempora non voluptatem."
     *         }
     *       },
     *       "reservedFor": "ULAPWDYBXPX2UK5E2CJBMKH5M4E64HVLYRN4FLOMBGJK6BXLWUIGLCXH2E",
     *       "saleType": "buyItNow",
     *       "sellAmount": 14422211285735156000,
     *       "seller": "TDRBTZSJYFQJUV46TGJFEJDZK5BO7YUEZ4G4E4JTTNXM54UXO2672S36CA",
     *       "sigNameAddress": "KYCJH7G5MNXKZHOQ37RERYW72Y4DXVDQNSNAUONNVXDX36KKG6QD5IV2YU",
     *       "state": "minting",
     *       "tags": [
     *         "Omnis ullam.",
     *         "Sit fugiat rerum dolorem voluptas itaque.",
     *         "Debitis maxime non."
     *       ],
     *       "timeChanged": "1981-03-17T05:44:03Z",
     *       "timeCreated": "2003-10-01T13:41:49Z",
     *       "timePurchased": "1996-09-28T12:21:30Z",
     *       "unverifiedCa": {
     *         "btc": [
     *           "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *         ]
     *       },
     *       "unverifiedCaAlgo": [
     *         "37UZJKCDNWT5FN4NGVD5WHHCBUXDNIB44AGXDDHM6PXG6GRN57TMFAFC6M",
     *         "6XZ7RGBHINB5KT2OJF2KFF2QSPE3SGO2FOUKNAH4KPBDBB5UNR7V7SBTEM",
     *         "ZNQC6BEJDOQCDW6LRE5INIXYJTDUXEPTBELBK36OUBJ2HMAGJWBEI62MGE",
     *         "FA2PDSFEKFLT3L75EWFQUO4OOQMHN4SUVBLXLOXKA2RYTH6UNBVIJ2PW7U"
     *       ]
     *     } */
    NfdRecord: {
      /**
       * @description NFD Application ID
       * @example 1000000
       */
      appID?: number;
      /**
       * @description NFD ASA ID
       * @example 8121303469633473000
       */
      asaID?: number;
      /**
       * @description Whether the verified Avatar set in this NFD is newer (arc19) then is set into the NFD. This will only be present on direct NFD fetch and if true
       * @example true
       */
      avatarOutdated?: boolean;
      /**
       * @description Verified Algorand addresses for this NFD
       * @example [
       *       "KPVZFXU2IOOXV5VX4PTJYVKVLPN4RYNI3GZJVCM65L6IU3HTZB3TJZR34I",
       *       "5KV42YAIF3GC7JZCYXG7UCWBCSRAXMKBCBKC6OFFNV3TS3YIKOP6VA5I6A",
       *       "TMJJEAHLT4IZOY2RQZ4UPPOQHMEHJFI6NKIBDVGMG4IQNLFEUGKZMRS3IM"
       *     ]
       */
      caAlgo?: string[];
      /**
       * @example curated
       * @enum {string}
       */
      category?: 'curated' | 'premium' | 'common';
      /**
       * @description Round this data was last fetched from
       * @example 8246060165777493000
       */
      currentAsOfBlock?: number;
      /**
       * @description account wallets should send funds to - precedence is: caAlgo[0], unverifiedCaAlgo[0], owner
       * @example VKWDUGEQTZRBDFX2DRWGJIN743ULR6WTSGWQPDIIJ52K3A3BK6QCAAWE4I
       */
      depositAccount?: string;
      /**
       * @description Not returned, used in tagging for response to indicate if-none-match etag matched
       * @example Ullam rerum nulla.
       */
      'match-check'?: string;
      /**
       * @description Tags set by the system for tracking/analytics
       * @example [
       *       "Quasi error voluptatem et assumenda optio.",
       *       "Fuga quo debitis.",
       *       "Non voluptatem qui porro aut."
       *     ]
       */
      metaTags?: string[];
      /** @example Repellat occaecati non maxime. */
      name: string;
      /** @example 44D4ICWAN5ZBIDBCYGI7E3NWVVNXFUW7PWIGMGGO2AJ5XJNLH7FVR3J55A */
      nfdAccount?: string;
      /**
       * @description Owner of NFD
       * @example CYR656Q6G7PH5VVJU5L76VTPDIWL4PY4QRUFGYD26TAMQGW44FP4WCQKSM
       */
      owner?: string;
      /**
       * @description NFD Application ID of Parent if this is a segment
       * @example 1000000
       */
      parentAppID?: number;
      properties?: components['schemas']['NFDProperties'];
      /**
       * @description Reserved owner of NFD
       * @example MUKAWLUI4E3MIE65EJZ5KMW445GKX6FTV4XBCG3LYJTPQ2VHKNBHJQ2LEY
       */
      reservedFor?: string;
      /**
       * @example auction
       * @enum {string}
       */
      saleType?: 'auction' | 'buyItNow';
      /**
       * @description amount NFD is being sold for (microAlgos)
       * @example 9988884318023348000
       */
      sellAmount?: number;
      /**
       * @description RecipientUid of NFD sales
       * @example RBQEJL5SKX3HFJ4YTSNDZYPHM33KFIWY4Z47CZXUUHK5Q3JQG3XCXXX7VI
       */
      seller?: string;
      /** @example A67WP7CDACZYDVGKMLJ3ASELLZRY6LSBT4FCZALA6AZGLHFVTXERIRGU3U */
      sigNameAddress?: string;
      /**
       * @example owned
       * @enum {string}
       */
      state?: 'available' | 'minting' | 'reserved' | 'forSale' | 'owned';
      /**
       * @description Tags assigned to this NFD
       * @example [
       *       "Voluptatum labore et esse.",
       *       "Non quia dolores modi optio in et.",
       *       "Et quia."
       *     ]
       */
      tags?: string[];
      /**
       * Format: date-time
       * @example 1979-06-28T11:01:27Z
       */
      timeChanged?: string;
      /**
       * Format: date-time
       * @example 1974-06-02T19:18:35Z
       */
      timeCreated?: string;
      /**
       * Format: date-time
       * @example 1991-11-17T16:59:16Z
       */
      timePurchased?: string;
      /**
       * @description Unverified (non-algo) Crypto addresses for this NFD
       * @example {
       *       "btc": [
       *         "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
       *       ]
       *     }
       */
      unverifiedCa?: {
        [key: string]: string[] | undefined;
      };
      /**
       * @description Unverified Algorand addresses for this NFD
       * @example [
       *       "Q64AX23TNCKV6OIWQARKFVXKIRVPTOIED5WOH3T4CQXQJW6TL7GLBGK5FA",
       *       "K3MAJFWIHG5LS7ARE2FAOVNBTKRTOHALLPEUZD6D6E33QITMCOXCUVV7TI"
       *     ]
       */
      unverifiedCaAlgo?: string[];
    };
    /** @example [
     *       {
     *         "appID": 1000000,
     *         "asaID": 5020498933399342000,
     *         "avatarOutdated": false,
     *         "caAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ],
     *         "cache-control": "Voluptas ea molestiae eligendi et asperiores.",
     *         "category": "Ut eos aspernatur.",
     *         "currentAsOfBlock": 2761096942291864600,
     *         "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "etag": "Sequi dolor fugiat.",
     *         "match-check": "Vel et enim numquam et qui incidunt.",
     *         "metaTags": [
     *           "Saepe libero eum eaque quo assumenda.",
     *           "Animi voluptatem est minus.",
     *           "Tenetur reprehenderit sunt adipisci necessitatibus."
     *         ],
     *         "name": "Autem ab.",
     *         "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *             "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *             "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *           },
     *           "userDefined": {
     *             "g": "Eveniet architecto consequatur."
     *           },
     *           "verified": {
     *             "caAlgo": "Nostrum ea."
     *           }
     *         },
     *         "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *         "sellAmount": 4924974612238891000,
     *         "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "state": "Nobis nesciunt.",
     *         "tags": [
     *           "Necessitatibus necessitatibus molestias cumque veritatis earum non.",
     *           "Voluptatem quia rerum.",
     *           "Dolor nesciunt minus sequi.",
     *           "Laborum voluptas consequatur aliquam doloremque."
     *         ],
     *         "timeChanged": "1991-02-07T01:20:39Z",
     *         "timeCreated": "2015-03-30T18:41:32Z",
     *         "timePurchased": "2015-12-09T05:54:10Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ]
     *       },
     *       {
     *         "appID": 1000000,
     *         "asaID": 5020498933399342000,
     *         "avatarOutdated": false,
     *         "caAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ],
     *         "cache-control": "Voluptas ea molestiae eligendi et asperiores.",
     *         "category": "Ut eos aspernatur.",
     *         "currentAsOfBlock": 2761096942291864600,
     *         "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "etag": "Sequi dolor fugiat.",
     *         "match-check": "Vel et enim numquam et qui incidunt.",
     *         "metaTags": [
     *           "Saepe libero eum eaque quo assumenda.",
     *           "Animi voluptatem est minus.",
     *           "Tenetur reprehenderit sunt adipisci necessitatibus."
     *         ],
     *         "name": "Autem ab.",
     *         "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *             "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *             "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *           },
     *           "userDefined": {
     *             "g": "Eveniet architecto consequatur."
     *           },
     *           "verified": {
     *             "caAlgo": "Nostrum ea."
     *           }
     *         },
     *         "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *         "sellAmount": 4924974612238891000,
     *         "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "state": "Nobis nesciunt.",
     *         "tags": [
     *           "Necessitatibus necessitatibus molestias cumque veritatis earum non.",
     *           "Voluptatem quia rerum.",
     *           "Dolor nesciunt minus sequi.",
     *           "Laborum voluptas consequatur aliquam doloremque."
     *         ],
     *         "timeChanged": "1991-02-07T01:20:39Z",
     *         "timeCreated": "2015-03-30T18:41:32Z",
     *         "timePurchased": "2015-12-09T05:54:10Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ]
     *       }
     *     ] */
    NfdRecordCollection: Array<components['schemas']['NfdRecord']>;
    /**
     * @description NFD contains all known information about an NFD record (full view)
     * @example {
     *       "appID": 1000000,
     *       "asaID": 4648676728671079000,
     *       "avatarOutdated": true,
     *       "caAlgo": [
     *         "N4Z5TMEWYLDHG4HG3FOH3EAECIQ2SUQYVOHQZ6RF4BRZO3JLICCFIJOP3M",
     *         "QX3IGQLRO5KNCLII5M6C3EPZBO2M6QY4IFC62FUQQ2PUGS2FXTA3RHVNUY"
     *       ],
     *       "cache-control": "Sint dolor deserunt maiores eius enim et.",
     *       "category": "curated",
     *       "currentAsOfBlock": 9642615870259490000,
     *       "depositAccount": "OWHD6XPZODTZSZ2XCI74IBJS5G2AEJ3NP4U7CSTTDJMBRRZAIKM4TQCUXU",
     *       "etag": "Corporis ut.",
     *       "match-check": "Ullam id non et dolores.",
     *       "metaTags": [
     *         "Quo maxime aliquam eveniet.",
     *         "Aut dolores.",
     *         "Voluptatem dicta harum labore.",
     *         "Eos excepturi quasi nulla sed."
     *       ],
     *       "name": "Officiis quidem dolor veritatis eaque perspiciatis.",
     *       "nfdAccount": "DUQGPK4TF45M2OVVFOC6CEW24S2IUT3RQHPHSI7QN7KAPNJF54FVKQML2M",
     *       "owner": "OMSDQRM5RT6DI5HZ6P2HVUUEBNRV77MTLAJGHV6GSYC4KUHY4ERLXSGZRI",
     *       "parentAppID": 1000000,
     *       "properties": {
     *         "internal": {
     *           "Autem temporibus minima cupiditate in accusamus.": "Et dolores corporis reprehenderit error repellendus ipsam.",
     *           "Eligendi necessitatibus voluptatibus commodi et.": "Aut est aliquam voluptatem ad.",
     *           "Iure accusamus perspiciatis et sequi officia.": "Magnam sed aspernatur."
     *         },
     *         "userDefined": {
     *           "dtwr": "Veritatis delectus et veritatis."
     *         },
     *         "verified": {
     *           "i": "Commodi consequatur aut."
     *         }
     *       },
     *       "reservedFor": "VRDFS6STLL2U4WUQKPCEMQ4CMWGGUC4LYJAJY5MG2WBLANIOGNLED5PJNA",
     *       "saleType": "buyItNow",
     *       "sellAmount": 7527506008863146000,
     *       "seller": "T4ET2ILT74B5R2L4OGNOSPGFLHTDWUDQ3KFHMN35BJKP6UQDJHPLTVK2NU",
     *       "sigNameAddress": "UKIBNWR6FV7H4EM5A3DFALUG3C7GMVKGM7PYLRZAMHHRJUJ5CM6OLJIFO4",
     *       "state": "owned",
     *       "tags": [
     *         "Laborum ipsam illum possimus quia.",
     *         "Est sit.",
     *         "Libero quae cum.",
     *         "Nihil qui odit numquam vel."
     *       ],
     *       "timeChanged": "1996-12-31T04:56:19Z",
     *       "timeCreated": "1999-05-01T02:06:48Z",
     *       "timePurchased": "1989-02-02T09:32:56Z",
     *       "unverifiedCa": {
     *         "btc": [
     *           "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *         ]
     *       },
     *       "unverifiedCaAlgo": [
     *         "PFBFTPZECSDE3JNR6GEP7XAHAT2CHWC54SLJOUWUMEXFNTXTGGYEFJKSLA",
     *         "A7LGQBXDNMWD4CVMBMXXBV25LPO5GC5RJJOIFKXJVLJ4CDO7PZGKVSOA64"
     *       ]
     *     }
     */
    NfdRecordResponseFull: {
      /**
       * @description NFD Application ID
       * @example 1000000
       */
      appID?: number;
      /**
       * @description NFD ASA ID
       * @example 7553428903969195000
       */
      asaID?: number;
      /**
       * @description Whether the verified Avatar set in this NFD is newer (arc19) then is set into the NFD. This will only be present on direct NFD fetch and if true
       * @example true
       */
      avatarOutdated?: boolean;
      /**
       * @description Verified Algorand addresses for this NFD
       * @example [
       *       "DI4PLYPNI2BDFNL6EXJRGTK3XAHD4KNAJ2SHZOIR3ZVGQLSKJTTKCVJP7A",
       *       "VAWRBCTG3GXKG2PMQTKWZ6XXK3XM3ZWCR2YIJOD6QCZMQXFLQMLEXIRPIE",
       *       "A5TUHMMLKMCCB6KURIQOB4STXCWVJT6D4RZMTOH3FJOB3XZKLO6VJQ4NGA",
       *       "ZQL4CGWC6GDFJHXUAGS2I3UYL5J3Q2P75HDHML5FKGAAXXLWNWVS7JR67U"
       *     ]
       */
      caAlgo?: string[];
      /**
       * @description Cache-Control header
       * @example Repellendus dolores ducimus quis non optio consequatur.
       */
      'cache-control'?: string;
      /**
       * @example premium
       * @enum {string}
       */
      category?: 'curated' | 'premium' | 'common';
      /**
       * @description Round this data was last fetched from
       * @example 2765039435204856000
       */
      currentAsOfBlock?: number;
      /**
       * @description account wallets should send funds to - precedence is: caAlgo[0], unverifiedCaAlgo[0], owner
       * @example UVWVNH2K7KEH5V7MJC3ZPOPSP4B7VIAH3RHGSLCAOQZOZJF3NKM2PCYHLM
       */
      depositAccount?: string;
      /**
       * @description ETag
       * @example Suscipit architecto occaecati aperiam est.
       */
      etag?: string;
      /**
       * @description Not returned, used in tagging for response to indicate if-none-match etag matched
       * @example Minima aut ut.
       */
      'match-check'?: string;
      /**
       * @description Tags set by the system for tracking/analytics
       * @example [
       *       "Sed numquam amet occaecati illo et et.",
       *       "Sunt mollitia quia et.",
       *       "Dolore in molestiae alias sunt."
       *     ]
       */
      metaTags?: string[];
      /** @example Ipsam aspernatur quis qui vero. */
      name: string;
      /** @example OWVK74ATCSBFS5JKPTWNVEQLF6ZZWR63DUNZV4FY73RJ277RKNYZ6P6KCI */
      nfdAccount?: string;
      /**
       * @description Owner of NFD
       * @example UCNQPRJLBTJ3MCUGXNH6Q6RY7UAM7WDJSVH4EGGKTHJZK6FZJDTGFK73KI
       */
      owner?: string;
      /**
       * @description NFD Application ID of Parent if this is a segment
       * @example 1000000
       */
      parentAppID?: number;
      properties?: components['schemas']['NFDProperties'];
      /**
       * @description Reserved owner of NFD
       * @example VWFZ22X2K7XS7B6W7ADA2NPFLLWFOQDBVFD4TUI6YT2UVFN7JMJS4X5QSE
       */
      reservedFor?: string;
      /**
       * @example auction
       * @enum {string}
       */
      saleType?: 'auction' | 'buyItNow';
      /**
       * @description amount NFD is being sold for (microAlgos)
       * @example 15009211552753363000
       */
      sellAmount?: number;
      /**
       * @description RecipientUid of NFD sales
       * @example IFM4EW7AHOPYECBPHIMN4D22GLJX4L7ADB3IO67AUULFWV4TVVIP3BI6UA
       */
      seller?: string;
      /** @example QVWT3PRARULU74MASGLG222F2W3G6YEX6R4EDGR67OEMDTSDTACSMC7J2I */
      sigNameAddress?: string;
      /**
       * @example forSale
       * @enum {string}
       */
      state?: 'available' | 'minting' | 'reserved' | 'forSale' | 'owned';
      /**
       * @description Tags assigned to this NFD
       * @example [
       *       "Quia adipisci asperiores dicta.",
       *       "Laudantium dolores magni est qui.",
       *       "Perferendis ut repellat a dolores nihil.",
       *       "Eos magnam ipsam."
       *     ]
       */
      tags?: string[];
      /**
       * Format: date-time
       * @example 2015-12-08T03:36:04Z
       */
      timeChanged?: string;
      /**
       * Format: date-time
       * @example 2015-01-28T08:06:32Z
       */
      timeCreated?: string;
      /**
       * Format: date-time
       * @example 2012-04-13T17:58:56Z
       */
      timePurchased?: string;
      /**
       * @description Unverified (non-algo) Crypto addresses for this NFD
       * @example {
       *       "btc": [
       *         "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
       *       ]
       *     }
       */
      unverifiedCa?: {
        [key: string]: string[] | undefined;
      };
      /**
       * @description Unverified Algorand addresses for this NFD
       * @example [
       *       "OWZXBKX7T5SF4OPPUWPYYROVKNOS5MUHY3N4SJOIVAR4BQ747SRD4JHNHI",
       *       "6K6P726MACJX7ZVQYE6PTHRLQBEHSHA6JRO7JALCK74XIKREMP4JKDSUTQ",
       *       "S6AWYT7L433CXRNMGLM2KCBNOILXTAZ6UME6AC4A7EJLEOAUMWSCX37AMI"
       *     ]
       */
      unverifiedCaAlgo?: string[];
    };
    /**
     * @description DonationListV2ResponseBody is the result type for an array of NfdRecordResponse (full view)
     * @example [
     *       {
     *         "appID": 1000000,
     *         "asaID": 4841701220047068000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "BBW5U5C3FCO2M2WBV7NG56I2UN6MQISVXWELPWZQOJCIQSVYZRUBEQGVVQ",
     *           "EVAI2BBE64RWTGN5GHGY6W7FGIBQVXMC7HI4VBD5RNHNWHHEZONI3H5ZSM",
     *           "IRV7KZZMNYZWRHDOGLDFKJZZPMPPN5XRITXPHX2WXGB3TIGVRW5UTDFDX4",
     *           "VD7YPYQ7KYF3QQUWJTVPHUWQGC727YXRMHUZPYP6ODQYWTTPJ2IW6VVCEU"
     *         ],
     *         "category": "premium",
     *         "currentAsOfBlock": 9873317708249324000,
     *         "depositAccount": "KSXLQTDTSJJKDJB6QGGVCTDN7BQNZ6LH56MOZSTA56SPSBG775P5H6PIPM",
     *         "match-check": "Enim ipsam corrupti distinctio.",
     *         "metaTags": [
     *           "Perferendis numquam voluptas sint placeat est qui.",
     *           "Dolorem facilis natus debitis.",
     *           "Reprehenderit ut iure culpa eum.",
     *           "Praesentium itaque quo quod qui sed."
     *         ],
     *         "name": "Cupiditate itaque provident et labore.",
     *         "nfdAccount": "ISEHPEB6VP57QZJ7HPIN7DME6SFFU5ISBBC6RSIBMHFO4S5O726IEOTGQE",
     *         "owner": "RQN7FLU72VQWQIQKI7SB2AMMUNSASDMTPWSNJIBIWJVIZQM5MI7HW7KX2M",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Consequatur vel.": "Dolorum reiciendis."
     *           },
     *           "userDefined": {
     *             "s": "Delectus sint accusamus."
     *           },
     *           "verified": {
     *             "k": "Et velit et qui doloremque commodi.",
     *             "p": "Repellendus perspiciatis ad itaque exercitationem rerum.",
     *             "y": "Nulla tempora non voluptatem."
     *           }
     *         },
     *         "reservedFor": "6FN2FTEZPSQ5UVAEQHPUH4CSM6LQAC46HBGHE3Y76ZTQPTD6ASZT33OC74",
     *         "saleType": "auction",
     *         "sellAmount": 11353073353138960000,
     *         "seller": "Q3XPHL5XGDBA74K3QVY2RBVPTG5CLWRYBWI273SY7LS3SPID4R7EOWHINE",
     *         "sigNameAddress": "IPONIM7M7P4NKD2TKTUJDVODR7W4PIN3EKB4O5D6P7BQKFI3UNZ5R6I6RE",
     *         "state": "owned",
     *         "tags": [
     *           "Quia vel rerum id.",
     *           "Et ad odio nesciunt omnis rerum.",
     *           "Quod voluptatem qui amet."
     *         ],
     *         "timeChanged": "2013-01-07T09:14:33Z",
     *         "timeCreated": "2008-10-31T17:36:49Z",
     *         "timePurchased": "1978-06-16T00:39:50Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "SC3R3564CELXE7JOM5HMR7EAUB7CSLMSYDGX2L7Y4PCH246O7BDBU5D2R4",
     *           "BIGTQEWXW7S2PEK63DHZ5AUVLXUROLS25HEHR2O5OUXI6IAZRLCPWWQ3CI",
     *           "2OXXE3K6VPSRAS7E3ZDXNC6DGZCPA34XHOJCHX3W636PCZRCFXL6KNDNKA"
     *         ]
     *       },
     *       {
     *         "appID": 1000000,
     *         "asaID": 4841701220047068000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "BBW5U5C3FCO2M2WBV7NG56I2UN6MQISVXWELPWZQOJCIQSVYZRUBEQGVVQ",
     *           "EVAI2BBE64RWTGN5GHGY6W7FGIBQVXMC7HI4VBD5RNHNWHHEZONI3H5ZSM",
     *           "IRV7KZZMNYZWRHDOGLDFKJZZPMPPN5XRITXPHX2WXGB3TIGVRW5UTDFDX4",
     *           "VD7YPYQ7KYF3QQUWJTVPHUWQGC727YXRMHUZPYP6ODQYWTTPJ2IW6VVCEU"
     *         ],
     *         "category": "premium",
     *         "currentAsOfBlock": 9873317708249324000,
     *         "depositAccount": "KSXLQTDTSJJKDJB6QGGVCTDN7BQNZ6LH56MOZSTA56SPSBG775P5H6PIPM",
     *         "match-check": "Enim ipsam corrupti distinctio.",
     *         "metaTags": [
     *           "Perferendis numquam voluptas sint placeat est qui.",
     *           "Dolorem facilis natus debitis.",
     *           "Reprehenderit ut iure culpa eum.",
     *           "Praesentium itaque quo quod qui sed."
     *         ],
     *         "name": "Cupiditate itaque provident et labore.",
     *         "nfdAccount": "ISEHPEB6VP57QZJ7HPIN7DME6SFFU5ISBBC6RSIBMHFO4S5O726IEOTGQE",
     *         "owner": "RQN7FLU72VQWQIQKI7SB2AMMUNSASDMTPWSNJIBIWJVIZQM5MI7HW7KX2M",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Consequatur vel.": "Dolorum reiciendis."
     *           },
     *           "userDefined": {
     *             "s": "Delectus sint accusamus."
     *           },
     *           "verified": {
     *             "k": "Et velit et qui doloremque commodi.",
     *             "p": "Repellendus perspiciatis ad itaque exercitationem rerum.",
     *             "y": "Nulla tempora non voluptatem."
     *           }
     *         },
     *         "reservedFor": "6FN2FTEZPSQ5UVAEQHPUH4CSM6LQAC46HBGHE3Y76ZTQPTD6ASZT33OC74",
     *         "saleType": "auction",
     *         "sellAmount": 11353073353138960000,
     *         "seller": "Q3XPHL5XGDBA74K3QVY2RBVPTG5CLWRYBWI273SY7LS3SPID4R7EOWHINE",
     *         "sigNameAddress": "IPONIM7M7P4NKD2TKTUJDVODR7W4PIN3EKB4O5D6P7BQKFI3UNZ5R6I6RE",
     *         "state": "owned",
     *         "tags": [
     *           "Quia vel rerum id.",
     *           "Et ad odio nesciunt omnis rerum.",
     *           "Quod voluptatem qui amet."
     *         ],
     *         "timeChanged": "2013-01-07T09:14:33Z",
     *         "timeCreated": "2008-10-31T17:36:49Z",
     *         "timePurchased": "1978-06-16T00:39:50Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "SC3R3564CELXE7JOM5HMR7EAUB7CSLMSYDGX2L7Y4PCH246O7BDBU5D2R4",
     *           "BIGTQEWXW7S2PEK63DHZ5AUVLXUROLS25HEHR2O5OUXI6IAZRLCPWWQ3CI",
     *           "2OXXE3K6VPSRAS7E3ZDXNC6DGZCPA34XHOJCHX3W636PCZRCFXL6KNDNKA"
     *         ]
     *       },
     *       {
     *         "appID": 1000000,
     *         "asaID": 4841701220047068000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "BBW5U5C3FCO2M2WBV7NG56I2UN6MQISVXWELPWZQOJCIQSVYZRUBEQGVVQ",
     *           "EVAI2BBE64RWTGN5GHGY6W7FGIBQVXMC7HI4VBD5RNHNWHHEZONI3H5ZSM",
     *           "IRV7KZZMNYZWRHDOGLDFKJZZPMPPN5XRITXPHX2WXGB3TIGVRW5UTDFDX4",
     *           "VD7YPYQ7KYF3QQUWJTVPHUWQGC727YXRMHUZPYP6ODQYWTTPJ2IW6VVCEU"
     *         ],
     *         "category": "premium",
     *         "currentAsOfBlock": 9873317708249324000,
     *         "depositAccount": "KSXLQTDTSJJKDJB6QGGVCTDN7BQNZ6LH56MOZSTA56SPSBG775P5H6PIPM",
     *         "match-check": "Enim ipsam corrupti distinctio.",
     *         "metaTags": [
     *           "Perferendis numquam voluptas sint placeat est qui.",
     *           "Dolorem facilis natus debitis.",
     *           "Reprehenderit ut iure culpa eum.",
     *           "Praesentium itaque quo quod qui sed."
     *         ],
     *         "name": "Cupiditate itaque provident et labore.",
     *         "nfdAccount": "ISEHPEB6VP57QZJ7HPIN7DME6SFFU5ISBBC6RSIBMHFO4S5O726IEOTGQE",
     *         "owner": "RQN7FLU72VQWQIQKI7SB2AMMUNSASDMTPWSNJIBIWJVIZQM5MI7HW7KX2M",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Consequatur vel.": "Dolorum reiciendis."
     *           },
     *           "userDefined": {
     *             "s": "Delectus sint accusamus."
     *           },
     *           "verified": {
     *             "k": "Et velit et qui doloremque commodi.",
     *             "p": "Repellendus perspiciatis ad itaque exercitationem rerum.",
     *             "y": "Nulla tempora non voluptatem."
     *           }
     *         },
     *         "reservedFor": "6FN2FTEZPSQ5UVAEQHPUH4CSM6LQAC46HBGHE3Y76ZTQPTD6ASZT33OC74",
     *         "saleType": "auction",
     *         "sellAmount": 11353073353138960000,
     *         "seller": "Q3XPHL5XGDBA74K3QVY2RBVPTG5CLWRYBWI273SY7LS3SPID4R7EOWHINE",
     *         "sigNameAddress": "IPONIM7M7P4NKD2TKTUJDVODR7W4PIN3EKB4O5D6P7BQKFI3UNZ5R6I6RE",
     *         "state": "owned",
     *         "tags": [
     *           "Quia vel rerum id.",
     *           "Et ad odio nesciunt omnis rerum.",
     *           "Quod voluptatem qui amet."
     *         ],
     *         "timeChanged": "2013-01-07T09:14:33Z",
     *         "timeCreated": "2008-10-31T17:36:49Z",
     *         "timePurchased": "1978-06-16T00:39:50Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "SC3R3564CELXE7JOM5HMR7EAUB7CSLMSYDGX2L7Y4PCH246O7BDBU5D2R4",
     *           "BIGTQEWXW7S2PEK63DHZ5AUVLXUROLS25HEHR2O5OUXI6IAZRLCPWWQ3CI",
     *           "2OXXE3K6VPSRAS7E3ZDXNC6DGZCPA34XHOJCHX3W636PCZRCFXL6KNDNKA"
     *         ]
     *       }
     *     ]
     */
    NfdRecordResponseFullCollection: Array<components['schemas']['NfdRecordResponseFull']>;
    /**
     * @description NFD contains all known information about an NFD record
     * @example {
     *       "appID": 1000000,
     *       "asaID": 12393184561027062000,
     *       "avatarOutdated": false,
     *       "caAlgo": [
     *         "THRZJ3DBNS2GFO6RZB6UEIEIWM63S365ZW7LERAVXQRCMJX5IUVPOEIYGM",
     *         "XMG3QISTDMN2FWX5KOJH2YQDWB7IXJMVXSVPBHGM5KKJ7EZ66VI2I2PFEI"
     *       ],
     *       "cache-control": "Aut excepturi exercitationem saepe impedit ut voluptatem.",
     *       "category": "curated",
     *       "currentAsOfBlock": 9685569027104543000,
     *       "depositAccount": "WKHF4LMWN4YDFGNMZF6MHW57QCLNNK3MOI2DMAVP6CONM3V4L7B7X7K35I",
     *       "etag": "Fugit dolorem aliquid molestiae itaque vitae voluptatem.",
     *       "match-check": "Eligendi velit.",
     *       "metaTags": [
     *         "Esse similique expedita et ipsa hic error.",
     *         "Mollitia odio et ullam est et.",
     *         "Numquam ducimus veniam consequuntur quibusdam.",
     *         "Sit omnis odit quo."
     *       ],
     *       "name": "Ullam placeat quia aut.",
     *       "nfdAccount": "5XTSU4PKOZ6DTBB62A4NVH3ONGKX6CEN2AXQKWEZS4G6PI7VRQB734ZWUM",
     *       "owner": "T3F55OBQLO5F2ZLEHV6OWOY6VJ5GCJE3AOA2PWTUY7UGEF3Z5MVOOFKBSY",
     *       "parentAppID": 1000000,
     *       "properties": {
     *         "internal": {
     *           "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *           "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *           "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *         },
     *         "userDefined": {
     *           "g": "Eveniet architecto consequatur."
     *         },
     *         "verified": {
     *           "caAlgo": "Nostrum ea."
     *         }
     *       },
     *       "reservedFor": "2VAXCM3XIBUGA5KMSYT2EN4EMVM6ZLYE6REBEKUV2ND4MB3GQBH5SMCOL4",
     *       "saleType": "auction",
     *       "sellAmount": 2179899587958369300,
     *       "seller": "FMVE7NGM7HMUVWVSMK7NOBVEP3QETTNZ7BFHGBIQLHCFN2MOXBWMBRPU4Q",
     *       "sigNameAddress": "4P3OW7XPV2DJ3AEFDCOJPEMQU4AQ4TTHNYVVJCJKJCDANUSAZZWNYRTPFI",
     *       "state": "forSale",
     *       "tags": [
     *         "Enim velit sed quam tenetur.",
     *         "Dignissimos sit."
     *       ],
     *       "timeChanged": "1973-04-15T02:11:08Z",
     *       "timeCreated": "1986-07-31T14:43:29Z",
     *       "timePurchased": "1973-12-12T22:50:40Z",
     *       "unverifiedCa": {
     *         "btc": [
     *           "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *         ]
     *       },
     *       "unverifiedCaAlgo": [
     *         "E4ZRP2DOHTKSWCCD74TTI6WOVZCFWG3VNQWG77HK3PLPI4FBI5FLHBP4KI",
     *         "I3QDMM5UYFLYBYVSDY7IMMOSECULOJDEUVGCL53WQXQZPFSVCD6ZG7XOUM",
     *         "IG4Y7FKTNZMZSXRVUKTRHU2AJ26KYBYJKNDIVCJ6AL4TTQCIW3VORYINCY"
     *       ]
     *     }
     */
    NfdRecordinaddress: {
      /**
       * @description NFD Application ID
       * @example 1000000
       */
      appID?: number;
      /**
       * @description NFD ASA ID
       * @example 12022775023028507000
       */
      asaID?: number;
      /**
       * @description Whether the verified Avatar set in this NFD is newer (arc19) then is set into the NFD. This will only be present on direct NFD fetch and if true
       * @example false
       */
      avatarOutdated?: boolean;
      /**
       * @description Verified Algorand addresses for this NFD
       * @example [
       *       "EQLDOOYUW2ZAEMZEBC5OJ5G5UMZJD766LH3CK3IWMW7NBEJ53EX4OHRUHA",
       *       "T4BXGAKXCFSZDIVHVHA2Q5PIMT2UF3T7EYSLCKUNP6DWCAEK3U4YPTX2TI"
       *     ]
       */
      caAlgo?: string[];
      /**
       * @description Cache-Control header
       * @example Dignissimos sequi.
       */
      'cache-control'?: string;
      /**
       * @example premium
       * @enum {string}
       */
      category?: 'curated' | 'premium' | 'common';
      /**
       * @description Round this data was last fetched from
       * @example 9692685994992521000
       */
      currentAsOfBlock?: number;
      /**
       * @description account wallets should send funds to - precedence is: caAlgo[0], unverifiedCaAlgo[0], owner
       * @example 6BWVUO7SXXYQHDRJ2RUYVACL3BAM7XO543OQWW7EK73IOASEN42YKMJRRE
       */
      depositAccount?: string;
      /**
       * @description ETag
       * @example Eos et est.
       */
      etag?: string;
      /**
       * @description Not returned, used in tagging for response to indicate if-none-match etag matched
       * @example Velit quia odit.
       */
      'match-check'?: string;
      /**
       * @description Tags set by the system for tracking/analytics
       * @example [
       *       "Asperiores quibusdam.",
       *       "Libero totam commodi rerum quaerat.",
       *       "Perferendis laudantium perspiciatis.",
       *       "Accusamus dolores quo suscipit accusamus."
       *     ]
       */
      metaTags?: string[];
      /** @example Omnis error vitae ducimus. */
      name: string;
      /** @example RN3GO4JHVCDPYO5IAW4E5AKXEMWYLL5WOUKNKZNWP6I4HKKZGTEHMLPAMM */
      nfdAccount?: string;
      /**
       * @description Owner of NFD
       * @example YPRK7CYGDEMCLHG23KF4D2SALJ7I7UUIQEEDUD66CZQKUJV5BRT3PRC5VA
       */
      owner?: string;
      /**
       * @description NFD Application ID of Parent if this is a segment
       * @example 1000000
       */
      parentAppID?: number;
      properties?: components['schemas']['NFDProperties'];
      /**
       * @description Reserved owner of NFD
       * @example DPRY7IGAHV4ZSOK3PFICGCC5JWCW5VAC4SCNLRJDCBADKHMNHP4B3YUBG4
       */
      reservedFor?: string;
      /**
       * @example auction
       * @enum {string}
       */
      saleType?: 'auction' | 'buyItNow';
      /**
       * @description amount NFD is being sold for (microAlgos)
       * @example 13095256749264996000
       */
      sellAmount?: number;
      /**
       * @description RecipientUid of NFD sales
       * @example R2YPXB4Q52HOHD2S3JET3HTYDSXVTZ66U6SYVMAZ2WFUVYSZKG2Q2EI2IE
       */
      seller?: string;
      /** @example RUS4BVYMPEXAMGZMI65QPJLR3QCG7VE27LXCOQTFMXPFYOYF2H2OVBY2TI */
      sigNameAddress?: string;
      /**
       * @example forSale
       * @enum {string}
       */
      state?: 'available' | 'minting' | 'reserved' | 'forSale' | 'owned';
      /**
       * @description Tags assigned to this NFD
       * @example [
       *       "Et dolorem.",
       *       "Autem nihil magni fuga."
       *     ]
       */
      tags?: string[];
      /**
       * Format: date-time
       * @example 2000-01-11T09:05:48Z
       */
      timeChanged?: string;
      /**
       * Format: date-time
       * @example 1991-11-28T21:13:22Z
       */
      timeCreated?: string;
      /**
       * Format: date-time
       * @example 2008-07-07T14:38:10Z
       */
      timePurchased?: string;
      /**
       * @description Unverified (non-algo) Crypto addresses for this NFD
       * @example {
       *       "btc": [
       *         "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
       *       ]
       *     }
       */
      unverifiedCa?: {
        [key: string]: string[] | undefined;
      };
      /**
       * @description Unverified Algorand addresses for this NFD
       * @example [
       *       "F2FPBTQ6S3DBU6QJP7ZJXYC7FLYMPYMWNMEXXHV7AGGCUZHOOWUHESD35Y",
       *       "LKXSL4U67E5BGVPJS5HLLIMZKGYCHKPYIGISNJ6SEFL5LWEPJSPRT3YKF4",
       *       "54VQQ4ZB3A6AUGNJVXMTSHOWQ7EAUNMQNKMFLD5L23TUVINBKA5TQ2TMAA"
       *     ]
       */
      unverifiedCaAlgo?: string[];
    };
    /** @example [
     *       {
     *         "appID": 1000000,
     *         "asaID": 15500599750261258000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ],
     *         "cache-control": "Dolore assumenda sit quae sed quidem neque.",
     *         "category": "Ut eos aspernatur.",
     *         "currentAsOfBlock": 14543974973886030000,
     *         "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "etag": "Alias eveniet natus accusamus velit iure.",
     *         "match-check": "Qui saepe.",
     *         "metaTags": [
     *           "Rerum quia dolore perspiciatis.",
     *           "Tempora at."
     *         ],
     *         "name": "Id velit id quasi.",
     *         "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *             "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *             "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *           },
     *           "userDefined": {
     *             "g": "Eveniet architecto consequatur."
     *           },
     *           "verified": {
     *             "caAlgo": "Nostrum ea."
     *           }
     *         },
     *         "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *         "sellAmount": 2182340915489949200,
     *         "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "state": "Nobis nesciunt.",
     *         "tags": [
     *           "Rerum et deleniti quibusdam adipisci debitis quia.",
     *           "Repellat veniam.",
     *           "Sunt sit repellat nemo.",
     *           "Tempora eos ex exercitationem ipsam modi consequatur."
     *         ],
     *         "timeChanged": "1979-05-30T11:34:14Z",
     *         "timeCreated": "2004-02-23T16:52:39Z",
     *         "timePurchased": "2014-12-20T00:22:29Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ]
     *       },
     *       {
     *         "appID": 1000000,
     *         "asaID": 15500599750261258000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ],
     *         "cache-control": "Dolore assumenda sit quae sed quidem neque.",
     *         "category": "Ut eos aspernatur.",
     *         "currentAsOfBlock": 14543974973886030000,
     *         "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "etag": "Alias eveniet natus accusamus velit iure.",
     *         "match-check": "Qui saepe.",
     *         "metaTags": [
     *           "Rerum quia dolore perspiciatis.",
     *           "Tempora at."
     *         ],
     *         "name": "Id velit id quasi.",
     *         "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *             "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *             "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *           },
     *           "userDefined": {
     *             "g": "Eveniet architecto consequatur."
     *           },
     *           "verified": {
     *             "caAlgo": "Nostrum ea."
     *           }
     *         },
     *         "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *         "sellAmount": 2182340915489949200,
     *         "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "state": "Nobis nesciunt.",
     *         "tags": [
     *           "Rerum et deleniti quibusdam adipisci debitis quia.",
     *           "Repellat veniam.",
     *           "Sunt sit repellat nemo.",
     *           "Tempora eos ex exercitationem ipsam modi consequatur."
     *         ],
     *         "timeChanged": "1979-05-30T11:34:14Z",
     *         "timeCreated": "2004-02-23T16:52:39Z",
     *         "timePurchased": "2014-12-20T00:22:29Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ]
     *       },
     *       {
     *         "appID": 1000000,
     *         "asaID": 15500599750261258000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ],
     *         "cache-control": "Dolore assumenda sit quae sed quidem neque.",
     *         "category": "Ut eos aspernatur.",
     *         "currentAsOfBlock": 14543974973886030000,
     *         "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "etag": "Alias eveniet natus accusamus velit iure.",
     *         "match-check": "Qui saepe.",
     *         "metaTags": [
     *           "Rerum quia dolore perspiciatis.",
     *           "Tempora at."
     *         ],
     *         "name": "Id velit id quasi.",
     *         "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *             "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *             "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *           },
     *           "userDefined": {
     *             "g": "Eveniet architecto consequatur."
     *           },
     *           "verified": {
     *             "caAlgo": "Nostrum ea."
     *           }
     *         },
     *         "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *         "sellAmount": 2182340915489949200,
     *         "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "state": "Nobis nesciunt.",
     *         "tags": [
     *           "Rerum et deleniti quibusdam adipisci debitis quia.",
     *           "Repellat veniam.",
     *           "Sunt sit repellat nemo.",
     *           "Tempora eos ex exercitationem ipsam modi consequatur."
     *         ],
     *         "timeChanged": "1979-05-30T11:34:14Z",
     *         "timeCreated": "2004-02-23T16:52:39Z",
     *         "timePurchased": "2014-12-20T00:22:29Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ]
     *       },
     *       {
     *         "appID": 1000000,
     *         "asaID": 15500599750261258000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ],
     *         "cache-control": "Dolore assumenda sit quae sed quidem neque.",
     *         "category": "Ut eos aspernatur.",
     *         "currentAsOfBlock": 14543974973886030000,
     *         "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "etag": "Alias eveniet natus accusamus velit iure.",
     *         "match-check": "Qui saepe.",
     *         "metaTags": [
     *           "Rerum quia dolore perspiciatis.",
     *           "Tempora at."
     *         ],
     *         "name": "Id velit id quasi.",
     *         "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *             "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *             "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *           },
     *           "userDefined": {
     *             "g": "Eveniet architecto consequatur."
     *           },
     *           "verified": {
     *             "caAlgo": "Nostrum ea."
     *           }
     *         },
     *         "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *         "sellAmount": 2182340915489949200,
     *         "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "state": "Nobis nesciunt.",
     *         "tags": [
     *           "Rerum et deleniti quibusdam adipisci debitis quia.",
     *           "Repellat veniam.",
     *           "Sunt sit repellat nemo.",
     *           "Tempora eos ex exercitationem ipsam modi consequatur."
     *         ],
     *         "timeChanged": "1979-05-30T11:34:14Z",
     *         "timeCreated": "2004-02-23T16:52:39Z",
     *         "timePurchased": "2014-12-20T00:22:29Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ]
     *       }
     *     ] */
    NfdRecordinaddressCollection: Array<components['schemas']['NfdRecordinaddress']>;
    /** @example {
     *       "match-check": "Rerum dolorum voluptatibus voluptatem.",
     *       "nfds": [
     *         {
     *           "appID": 1000000,
     *           "asaID": 5020498933399342000,
     *           "avatarOutdated": false,
     *           "caAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ],
     *           "cache-control": "Voluptas ea molestiae eligendi et asperiores.",
     *           "category": "Ut eos aspernatur.",
     *           "currentAsOfBlock": 2761096942291864600,
     *           "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "etag": "Sequi dolor fugiat.",
     *           "match-check": "Vel et enim numquam et qui incidunt.",
     *           "metaTags": [
     *             "Saepe libero eum eaque quo assumenda.",
     *             "Animi voluptatem est minus.",
     *             "Tenetur reprehenderit sunt adipisci necessitatibus."
     *           ],
     *           "name": "Autem ab.",
     *           "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "parentAppID": 1000000,
     *           "properties": {
     *             "internal": {
     *               "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *               "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *               "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *             },
     *             "userDefined": {
     *               "g": "Eveniet architecto consequatur."
     *             },
     *             "verified": {
     *               "caAlgo": "Nostrum ea."
     *             }
     *           },
     *           "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *           "sellAmount": 4924974612238891000,
     *           "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "state": "Nobis nesciunt.",
     *           "tags": [
     *             "Necessitatibus necessitatibus molestias cumque veritatis earum non.",
     *             "Voluptatem quia rerum.",
     *             "Dolor nesciunt minus sequi.",
     *             "Laborum voluptas consequatur aliquam doloremque."
     *           ],
     *           "timeChanged": "1991-02-07T01:20:39Z",
     *           "timeCreated": "2015-03-30T18:41:32Z",
     *           "timePurchased": "2015-12-09T05:54:10Z",
     *           "unverifiedCa": {
     *             "btc": [
     *               "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *             ]
     *           },
     *           "unverifiedCaAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ]
     *         },
     *         {
     *           "appID": 1000000,
     *           "asaID": 5020498933399342000,
     *           "avatarOutdated": false,
     *           "caAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ],
     *           "cache-control": "Voluptas ea molestiae eligendi et asperiores.",
     *           "category": "Ut eos aspernatur.",
     *           "currentAsOfBlock": 2761096942291864600,
     *           "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "etag": "Sequi dolor fugiat.",
     *           "match-check": "Vel et enim numquam et qui incidunt.",
     *           "metaTags": [
     *             "Saepe libero eum eaque quo assumenda.",
     *             "Animi voluptatem est minus.",
     *             "Tenetur reprehenderit sunt adipisci necessitatibus."
     *           ],
     *           "name": "Autem ab.",
     *           "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "parentAppID": 1000000,
     *           "properties": {
     *             "internal": {
     *               "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *               "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *               "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *             },
     *             "userDefined": {
     *               "g": "Eveniet architecto consequatur."
     *             },
     *             "verified": {
     *               "caAlgo": "Nostrum ea."
     *             }
     *           },
     *           "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *           "sellAmount": 4924974612238891000,
     *           "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "state": "Nobis nesciunt.",
     *           "tags": [
     *             "Necessitatibus necessitatibus molestias cumque veritatis earum non.",
     *             "Voluptatem quia rerum.",
     *             "Dolor nesciunt minus sequi.",
     *             "Laborum voluptas consequatur aliquam doloremque."
     *           ],
     *           "timeChanged": "1991-02-07T01:20:39Z",
     *           "timeCreated": "2015-03-30T18:41:32Z",
     *           "timePurchased": "2015-12-09T05:54:10Z",
     *           "unverifiedCa": {
     *             "btc": [
     *               "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *             ]
     *           },
     *           "unverifiedCaAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ]
     *         },
     *         {
     *           "appID": 1000000,
     *           "asaID": 5020498933399342000,
     *           "avatarOutdated": false,
     *           "caAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ],
     *           "cache-control": "Voluptas ea molestiae eligendi et asperiores.",
     *           "category": "Ut eos aspernatur.",
     *           "currentAsOfBlock": 2761096942291864600,
     *           "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "etag": "Sequi dolor fugiat.",
     *           "match-check": "Vel et enim numquam et qui incidunt.",
     *           "metaTags": [
     *             "Saepe libero eum eaque quo assumenda.",
     *             "Animi voluptatem est minus.",
     *             "Tenetur reprehenderit sunt adipisci necessitatibus."
     *           ],
     *           "name": "Autem ab.",
     *           "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "parentAppID": 1000000,
     *           "properties": {
     *             "internal": {
     *               "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *               "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *               "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *             },
     *             "userDefined": {
     *               "g": "Eveniet architecto consequatur."
     *             },
     *             "verified": {
     *               "caAlgo": "Nostrum ea."
     *             }
     *           },
     *           "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *           "sellAmount": 4924974612238891000,
     *           "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "state": "Nobis nesciunt.",
     *           "tags": [
     *             "Necessitatibus necessitatibus molestias cumque veritatis earum non.",
     *             "Voluptatem quia rerum.",
     *             "Dolor nesciunt minus sequi.",
     *             "Laborum voluptas consequatur aliquam doloremque."
     *           ],
     *           "timeChanged": "1991-02-07T01:20:39Z",
     *           "timeCreated": "2015-03-30T18:41:32Z",
     *           "timePurchased": "2015-12-09T05:54:10Z",
     *           "unverifiedCa": {
     *             "btc": [
     *               "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *             ]
     *           },
     *           "unverifiedCaAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ]
     *         },
     *         {
     *           "appID": 1000000,
     *           "asaID": 5020498933399342000,
     *           "avatarOutdated": false,
     *           "caAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ],
     *           "cache-control": "Voluptas ea molestiae eligendi et asperiores.",
     *           "category": "Ut eos aspernatur.",
     *           "currentAsOfBlock": 2761096942291864600,
     *           "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "etag": "Sequi dolor fugiat.",
     *           "match-check": "Vel et enim numquam et qui incidunt.",
     *           "metaTags": [
     *             "Saepe libero eum eaque quo assumenda.",
     *             "Animi voluptatem est minus.",
     *             "Tenetur reprehenderit sunt adipisci necessitatibus."
     *           ],
     *           "name": "Autem ab.",
     *           "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "parentAppID": 1000000,
     *           "properties": {
     *             "internal": {
     *               "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *               "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *               "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *             },
     *             "userDefined": {
     *               "g": "Eveniet architecto consequatur."
     *             },
     *             "verified": {
     *               "caAlgo": "Nostrum ea."
     *             }
     *           },
     *           "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *           "sellAmount": 4924974612238891000,
     *           "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "state": "Nobis nesciunt.",
     *           "tags": [
     *             "Necessitatibus necessitatibus molestias cumque veritatis earum non.",
     *             "Voluptatem quia rerum.",
     *             "Dolor nesciunt minus sequi.",
     *             "Laborum voluptas consequatur aliquam doloremque."
     *           ],
     *           "timeChanged": "1991-02-07T01:20:39Z",
     *           "timeCreated": "2015-03-30T18:41:32Z",
     *           "timePurchased": "2015-12-09T05:54:10Z",
     *           "unverifiedCa": {
     *             "btc": [
     *               "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *             ]
     *           },
     *           "unverifiedCaAlgo": [
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *             "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *           ]
     *         }
     *       ],
     *       "total": 13484193585016056000
     *     } */
    NfdV2SearchRecords: {
      /**
       * @description Not returned, used in tagging for response to indicate if-none-match etag matched
       * @example Est impedit.
       */
      'match-check'?: string;
      nfds: components['schemas']['NfdRecordCollection'];
      /**
       * @description total number of results, with data containing paged amount based on offset/limit
       * @example 6565293062155149000
       */
      total: number;
    };
    /** @example {
     *       "offer": 4069234909314,
     *       "payReceiver": false,
     *       "reservedFor": "DF6MZ6MKBIFDED72HY5Q7TSXJS6LHINTEUJDIDWC44UMDNT47TULRBN7KM",
     *       "sender": "P67W24MDX4RQMYRCSZLEAHD7CPTST56ISQSFK6AIYEQWVWEFQUQALQMTBU"
     *     } */
    OfferRequestBody: {
      /**
       * @description Amount in microAlgo to sell the NFD for.  1 ALGO is 1,000,000 microAlgo. 1 ALGO minimum, 100 million maximum.
       * @example 41521039776257
       */
      offer: number;
      /**
       * @description Whether to pay the offer amount + fees to the account the NFD is reserved for.  Equivalent to 'gifting' the NFD
       * @example true
       */
      payReceiver?: boolean;
      /** @example 3R5KSNXGKZ27NZJ64ZB2YE2JZJSG5LALCUQXPN2IG27E6KIWYU6TTLVREU */
      reservedFor?: string;
      /**
       * @description SenderUid of transaction - needs to be owner of NFD
       * @example POKA7SRNROCZTZBHSQEIQJCQUABXBMGIRP5PKHPXMQ46LLCWY2Y3KY5K5A
       */
      sender: string;
    };
    /** @example {
     *       "buyer": "BC7RMJRUYPKRYE7UNANCUC2E6UUI5EOHQXT57FRR34IZRC7M4NVVUZGUD4",
     *       "conveniencePct": 2544997678611500500,
     *       "name": "w6b"
     *     } */
    PartnerKickoffRequestBody: {
      /** @example M6EJYGDLAEQ3G4NO4ROXXRM735FXNL5DO72BXX63XR5357MFCA5PE3XJSI */
      buyer: string;
      /**
       * Format: int64
       * @description a convenience fee percentage to add 'on top' of the NFD price - 10 is 1%, 150 is 15%
       * @example 7206643941687166000
       */
      conveniencePct?: number;
      /** @example p8 */
      name: string;
    };
    /** @example {
     *       "note": "yn3",
     *       "offer": 13941009993842,
     *       "sender": "4YDMEOMX4SBWK2ER24YS7DB22O4FXKVQYV3T3DE5ESJMBAZF2TLZP6TQV4"
     *     } */
    PostOfferToOwnerRequestBody: {
      /**
       * @description Note to pass along to the NFD owner.  Must be provided but can be blank
       * @example 56e
       */
      note: string;
      /**
       * @description Amount in microAlgo being offered to the NFD owner
       * @example 98942873671619
       */
      offer: number;
      /** @example Z3CCHJSPNVV5NZM3M3BBS5ADDWGVTBPHNFAAXJUISBPJ4IFGGXN25JQS6A */
      sender: string;
    };
    /** @example {
     *       "buyer": "532IM3MHKWJHAEZZZGQWEYDKKZP2PDLLPZIXMOHUNFCNFKJPHZEN7ZDL3Q",
     *       "offer": 16913982180728,
     *       "rejectNFT": false
     *     } */
    PurchaseRequestBody: {
      /** @example XOEVVQM3IDPT33IECWY4JFPCZCJ2RNV4L6SLVWNOJVKXJHR7GPPFDDCLTM */
      buyer: string;
      /**
       * @description Amount in microAlgo to purchase/claim the NFD for
       * @example 49816540243498
       */
      offer: number;
      /**
       * @description Whether to reject receiving the NFT into the purchasers account, leaving or returning it to the NFDs vault instead
       * @default false
       * @example true
       */
      rejectNFT: boolean;
    };
    /** @example {
     *       "limit": 5,
     *       "secsRemaining": 50
     *     } */
    RateLimited: {
      /**
       * Format: int64
       * @example 5
       */
      limit: number;
      /**
       * Format: int64
       * @example 50
       */
      secsRemaining: number;
    };
    /** @example {
     *       "sender": "ZSKJQAAVLISAFX5UC36JTEXUHP52QSTPO6O35T423GSQKUO3GNH3II6ZIY"
     *     } */
    RescindOfferRequestBody: {
      /**
       * @description SenderUid of transaction - needs to be owner of NFD
       * @example CF3AUCGZNNXGJWVBADZFBYLS3EJ554DOB52S7BFU4KKER7TKEZIZ3JIKSY
       */
      sender: string;
    };
    /** @example {
     *       "lock": false,
     *       "sellAmount": 74708003,
     *       "sender": "7PABRK3PBVULBYJYFKMGQJGFIQ55YILGULXSHGNEB3AEYMQMRSTUM4VJI4"
     *     } */
    SegmentLockRequestBody: {
      /**
       * @description Whether to lock (true), or unlock (false)
       * @example false
       */
      lock: boolean;
      /**
       * @description amount users minting off the segment have to pay to mint in USD (in cents - ie: 300 = $3.00). Set to 0 if locking
       * @example 3412637
       */
      sellAmount: number;
      /**
       * @description SenderUid of transaction - needs to be owner of NFD
       * @example K2YST5PS3RSQ6HHSUQSWMPMQGXDGRCVSFZZQWTAMWWEATHHQLCXOLUCNBQ
       */
      sender: string;
    };
    /**
     * @description Price breakdown on minting a segment off another NFD
     * @example {
     *       "algoUsd": 0.14493218892865334,
     *       "carryCost": 13706267845583661000,
     *       "discountRate": 0.8919984987737768,
     *       "parentSegmentCount": 11426888743669203000,
     *       "sellAmount": 6958418286886868000,
     *       "unlockedSellPrice": 0.9575727108247639,
     *       "usdMinCost": 0.15848235364982158
     *     }
     */
    SegmentPriceResponseBody: {
      /**
       * Format: double
       * @description Price of ALGO in USD
       * @example 0.09732614116080338
       */
      algoUsd: number;
      /**
       * @description Algorand carry cost - amount required for MBR (Minimum Balance Requirement) of contracts, escrows, etc
       * @example 11020277625467415000
       */
      carryCost: number;
      /**
       * Format: double
       * @description Discount rate % that is applied for this segment name - 0 if discount point not reached - starting after 2500 NFDs
       * @example 0.31376601749339705
       */
      discountRate: number;
      /**
       * @description Number of segments minted off of parent NFD
       * @example 15519794809197017000
       */
      parentSegmentCount: number;
      /**
       * @description Total Price in microAlgo to mint including ALGO carry cost
       * @example 13707464604909631000
       */
      sellAmount: number;
      /**
       * Format: double
       * @description Price in USD for unlocked mint of this segment
       * @example 0.002650931150897904
       */
      unlockedSellPrice?: number;
      /**
       * Format: double
       * @description Minimum price in USD the segment has to be (not including ALGO carry cost).  If locked, the fixed price, or if unlocked, the platform price
       * @example 0.04394102768535881
       */
      usdMinCost: number;
    };
    /** @example {
     *       "amount": 11951530414269,
     *       "assets": [
     *         1158948135762199800,
     *         13028861499163400000
     *       ],
     *       "note": "imx",
     *       "receiver": "Doloremque omnis facilis eius.",
     *       "receiverCanSign": true,
     *       "receiverType": "account",
     *       "sender": "7OLDA6G3XTGT4NUOIONHZHOYXLB5E737P7K4B6JZQHU7XTOFMZX7PI4MVY"
     *     } */
    SendFromVaultRequestBody: {
      /**
       * @description Base amount (in base units of specified asset - so decimals must be considered) of asset to send.   If multiple assets are specified, amount is should be 0 as ALL of each are sent and closed out
       * @example 27100694598491
       */
      amount: number;
      /**
       * @description Algorand ASA IDs to transfer FROM vault - use asset 0 to send ALGO.  Specifying multiple assets means ALL of each are sent and amount is ignored. If receiver is a vault and needs to opt-in, then need MBR/opt-in pairs (5 pairs - 8  opt-ins each - 40 assets), then 6 send calls of 7 assets w/ 5 at end for total of 40.  If receiver is already opted-in, then 112 (7 per txn, 16 tnxs) is max.
       * @example [
       *       6299089082474223000,
       *       3608101893447390000,
       *       16141015687595821000
       *     ]
       */
      assets: number[];
      /**
       * @description Optional note to include in asset send transaction
       * @default
       * @example bo6
       */
      note: string;
      /**
       * @description Algorand account or NFD Name (if vault receiver) the asset(s) should be sent to
       * @example Et blanditiis iure neque dolorem dolore.
       */
      receiver: string;
      /**
       * @description Specifies that the receiver account is something the caller can sign for. If specified, then opt-in transactions it signs may be included
       * @default false
       * @example false
       */
      receiverCanSign: boolean;
      /**
       * @description Account or NFD Vault the asset should be sent to (if allowed)
       * @default account
       * @example account
       * @enum {string}
       */
      receiverType: 'account' | 'nfdVault';
      /**
       * @description SenderUid of transaction, must be NFD owner
       * @example 5FT3NPV342SVB4CADB6PIZIYEVGGLJOGG6LSXRT6WYN7JPKKIEP64LMXOM
       */
      sender: string;
    };
    /** @example {
     *       "amount": 34085654867694,
     *       "assets": [
     *         17171728066069834000,
     *         2120006550068793000
     *       ],
     *       "note": "wxm",
     *       "optInOnly": false,
     *       "sender": "JB6OV7732W7BU3Q6ZRSYBGDG7QBSYS2NRCOBGRBFQ4EBID73KP3QRCETIM"
     *     } */
    SendToVaultRequestBody: {
      /**
       * @description Base amount (in base units of specified asset - so decimals must be considered) of asset to send.   If multiple assets specified, amount is ignored and ALL of each are sent
       * @example 64136146542222
       */
      amount: number;
      /**
       * @description Algorand ASA IDs to transfer (and opt-in inside vault if necessary) - use asset 0 to send ALGO.  Specifying multiple assets means ALL of each are sent and amount is ignored. 13 is max assets that can be specified if they're being sent (2 for MBR payments, 2 for opt-in txns (8+4 asset opt-ins), 12 asset transfers).  If opt-in only then 64 is maximum (1 MBR per 8 assets, 8 assets per txn * 8 txns)
       * @example [
       *       4395232044146266600
       *     ]
       */
      assets: number[];
      /**
       * @description Optional note to include in asset send transaction
       * @default
       * @example apl
       */
      note: string;
      /**
       * @description Whether to only opt-in to the asset, instead of including asset transfer txn
       * @default false
       * @example true
       */
      optInOnly: boolean;
      /** @example YBHESLDA22AVS3XHQWGBIWU5KP3DI6OZJQY742QF35QIP7V4KZA5XBFJVE */
      sender: string;
    };
    /** @example {
     *       "address": "BU2QWQOECVRRDFYS6KOUXCFBQSPNJFPSMYBC3RU3GTABPD7M462TUJOI2I",
     *       "sender": "GEKE5UXXKI7YTS225F4MDYRM4YMARN3NHIHZFOXSEJ3BTOXFRBL276ZH4Q"
     *     } */
    SetPrimaryAddressRequestBody: {
      /**
       * @description The address (already linked) to make primary - swapping into position if necessary
       * @example S227EUJHJA3RWIC3QFT4ZKU2WKSFDNJJDGIUQ5AEVOSPTMWGMPUILVJVKQ
       */
      address: string;
      /**
       * @description Address that will be signing the returned transactions.  Should be owner of NFD
       * @example AQT555T4T7DHTVP3H7URIMX47Z43VP5NWCOAGXY4I6PUOWJARNRB6F5NBI
       */
      sender: string;
    };
    /** @example {
     *       "forSale": 8370020928995945000,
     *       "match-check": "Laboriosam eligendi molestias nihil sed.",
     *       "mintedTotals": {
     *         "day": 5946962110516338000,
     *         "lifetime": 9057313082559408000,
     *         "month": 179304385621365220,
     *         "week": 8284991779767313000
     *       },
     *       "segmentTotals": {
     *         "day": 1346019209757091800,
     *         "lifetime": 6155779796363630000,
     *         "month": 7109534578120974000,
     *         "week": 16500646923844545000
     *       },
     *       "soldTotals": {
     *         "day": 1854399872069618200,
     *         "lifetime": 15788854907826473000,
     *         "month": 8136075642710085000,
     *         "week": 9449423993006782000
     *       },
     *       "total": 11670312685505470000,
     *       "totalSegments": 1484550912997389000,
     *       "uniqueOwners": 14580466733695263000
     *     } */
    TotalsOKResponseBody: {
      /** @example 14430686464501672000 */
      forSale: number;
      /**
       * @description Not returned, used in tagging for response to indicate if-none-match etag matched
       * @example Vel mollitia eum ipsa ut asperiores provident.
       */
      'match-check'?: string;
      /** @example {
       *       "day": 13896109011960906000,
       *       "lifetime": 4989808817377186000,
       *       "month": 6649710533687853000,
       *       "week": 15379569414841258000
       *     } */
      mintedTotals: {
        /** @example 1075755146752953500 */
        day?: number;
        /** @example 7211793212791182000 */
        lifetime?: number;
        /** @example 15454871543693457000 */
        month?: number;
        /** @example 8829882838836900000 */
        week?: number;
      };
      /** @example {
       *       "day": 13184627534459068000,
       *       "lifetime": 2582379155404633000,
       *       "month": 14515205983938003000,
       *       "week": 3870666246736453000
       *     } */
      segmentTotals: {
        /** @example 2381359053191107000 */
        day?: number;
        /** @example 12254979602474860000 */
        lifetime?: number;
        /** @example 14319466523512320000 */
        month?: number;
        /** @example 10456807807838544000 */
        week?: number;
      };
      /** @example {
       *       "day": 13503801124533770000,
       *       "lifetime": 4121587425754021000,
       *       "month": 15401984138745276000,
       *       "week": 2486068465642806000
       *     } */
      soldTotals: {
        /** @example 2452292292334607000 */
        day?: number;
        /** @example 3381769852551433000 */
        lifetime?: number;
        /** @example 5118195468219320000 */
        month?: number;
        /** @example 14537915727032422000 */
        week?: number;
      };
      /** @example 2560242637665918000 */
      total: number;
      /** @example 11631217559732855000 */
      totalSegments: number;
      /** @example 111853277330358160 */
      uniqueOwners: number;
    };
    /**
     * @description TwitterRecord contains information about an NFD w/ Verified Twitter account and basic info on its twitter metrics
     * @example {
     *       "followers": 4409769895775875000,
     *       "following": 5831161579856650000,
     *       "nfd": {
     *         "appID": 1000000,
     *         "asaID": 5558854215334505000,
     *         "avatarOutdated": true,
     *         "caAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ],
     *         "cache-control": "Deserunt et.",
     *         "category": "Ut eos aspernatur.",
     *         "currentAsOfBlock": 7892847818570794000,
     *         "depositAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "etag": "Dolor aperiam qui quidem et.",
     *         "metaTags": [
     *           "Et placeat sit aliquam doloremque dolorem.",
     *           "Aut amet ut inventore recusandae consectetur.",
     *           "Vitae consequatur.",
     *           "Inventore quae ad aut."
     *         ],
     *         "name": "Neque voluptas modi qui.",
     *         "nfdAccount": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "owner": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "parentAppID": 1000000,
     *         "properties": {
     *           "internal": {
     *             "Animi veniam eum esse eos et porro.": "Ullam veritatis qui placeat quo.",
     *             "Quidem a nesciunt.": "Et alias dolor debitis veniam.",
     *             "Ut repellendus doloribus omnis quidem sed omnis.": "In aut neque vel."
     *           },
     *           "userDefined": {
     *             "g": "Eveniet architecto consequatur."
     *           },
     *           "verified": {
     *             "caAlgo": "Nostrum ea."
     *           }
     *         },
     *         "reservedFor": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "saleType": "Ad veritatis nobis esse error pariatur veniam.",
     *         "sellAmount": 15381587798375604000,
     *         "seller": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "sigNameAddress": "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *         "state": "Nobis nesciunt.",
     *         "tags": [
     *           "Optio maxime enim.",
     *           "Quisquam labore et aliquam tempora et.",
     *           "Aut esse recusandae vero deserunt unde quidem.",
     *           "Vel quis ipsa exercitationem nesciunt vero."
     *         ],
     *         "timeChanged": "1984-03-05T05:40:14Z",
     *         "timeCreated": "2001-07-06T09:16:45Z",
     *         "timePurchased": "1971-03-19T09:24:10Z",
     *         "unverifiedCa": {
     *           "btc": [
     *             "12KKDt4Mj7N5UAkQMN7LtPZMayenXHa8KL"
     *           ]
     *         },
     *         "unverifiedCaAlgo": [
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
     *           "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
     *         ]
     *       },
     *       "timeChanged": "1979-04-03T10:20:33Z",
     *       "tweets": 15235055300968260000,
     *       "twitterHandle": "Esse praesentium."
     *     }
     */
    TwitterRecord: {
      /** @example 14208008643992545000 */
      followers: number;
      /** @example 16237849971824839000 */
      following: number;
      nfd: components['schemas']['NFD'];
      /**
       * Format: date-time
       * @example 1984-05-27T17:10:15Z
       */
      timeChanged: string;
      /** @example 3960775709839095000 */
      tweets: number;
      /** @example Ex optio debitis est. */
      twitterHandle: string;
    };
    /** @example {
     *       "properties": {
     *         "internal": {
     *           "Nostrum eius.": "Aliquid dolor sint sint quidem maiores corporis.",
     *           "Sint aut qui sit doloribus qui illum.": "Est alias similique."
     *         },
     *         "userDefined": {
     *           "c": "Recusandae excepturi est qui libero dicta maxime.",
     *           "ca.m": "Modi nihil quis dolorem.",
     *           "r": "Quod quasi ipsum labore hic quaerat."
     *         },
     *         "verified": {
     *           "xzr": "Et excepturi."
     *         }
     *       },
     *       "sender": "Q43C2PXZMI4YAUH2UVI3K3AG6GB35D7BOH447H65OD3K3RICGOITJNNGYE"
     *     } */
    UpdatePartialRequestBody: {
      properties: components['schemas']['NFDProperties'];
      /**
       * @description Address that will be signing the returned transactions.  Should be owner of NFD
       * @example XEFO2HWZT6UO7PLYCJVWWKQPPQSPVGLONBGATZYKQGHK5QKHRZWFQ6ZEKE
       */
      sender: string;
    };
    /** @example {
     *       "lock": true,
     *       "reLockAt": "1992-01-14T00:04:41Z",
     *       "sender": "2UZ53QC4ROHO24VY5AZ7OYQTWN63DOMZJ4YTEVFMQACOK6W4FXKOSII7II"
     *     } */
    VaultOptInLockRequestBody: {
      /**
       * @description Whether to lock (true), or unlock (false)
       * @example true
       */
      lock: boolean;
      /**
       * Format: date-time
       * @description If unlocking vault, specify a time to automatically re-lock the vault.  This allows an unlock that only lasts for a paticular amount of time.  The time specifies the moment the vault should re-lock.
       * @example 2012-02-13T23:59:08Z
       */
      reLockAt?: string;
      /**
       * @description SenderUid of transaction - needs to be owner of NFD
       * @example UY4U76AHA5KXWFBQTVT5V5OHZZV6FM7IYEP5T6S5BXUFDSPSKKYOBSFZTM
       */
      sender: string;
    };
    /** @example {
     *       "challenge": "Suscipit consequatur."
     *     } */
    VerifyConfirmRequestBody: {
      /**
       * @description Challenge value, optional depending on verification type
       * @example Enim praesentium iusto expedita dolore.
       */
      challenge?: string;
    };
    /**
     * @description Whether verification was successful
     * @example {
     *       "confirmed": false
     *     }
     */
    VerifyConfirmResponseBody: {
      /** @example true */
      confirmed: boolean;
    };
    /** @example {
     *       "fieldToVerify": "email",
     *       "name": "69",
     *       "sender": "CHV7XORUQRVG73J4FTBXYI3OJOOALE56JAW7BADWPUABCEOZZKO7OVKD5I"
     *     } */
    VerifyRequestRequestBody: {
      /**
       * @description User defined field name to verify
       * @example domain
       * @enum {string}
       */
      fieldToVerify: 'twitter' | 'github' | 'domain' | 'email' | 'avatar' | 'banner' | 'nfdnrights';
      /** @example j */
      name: string;
      /**
       * @description SenderUid of transaction - needs to be owner of NFD
       * @example YTIYCWKG4J32OWAP5S3LKWBELCZ3IVH3KKJDJHE424TP4BQBUO7WJIFDMQ
       */
      sender: string;
    };
    /**
     * @description Data to use as part of verification
     * @example {
     *       "challenge": "Minus corrupti quos exercitationem inventore.",
     *       "id": "Non aperiam sit dignissimos.",
     *       "validated": false
     *     }
     */
    VerifyRequestResponseBody: {
      /**
       * @description Challenge to be used as part of verification process, with use specific to each field
       * @example Alias dolore exercitationem sit expedita eveniet sed.
       */
      challenge: string;
      /**
       * @description ID of challenge, must be used in subsequent confirmation call but may be blank
       * @example Voluptas voluptas nulla nisi veniam amet.
       */
      id: string;
      /**
       * @description If set, no confirmation is required, the verify call was sufficient
       * @example true
       */
      validated?: boolean;
    };
    /** @example {
     *       "appVersion": "5cfa595 [2022-03-20T17:02:35Z]",
     *       "contractVersion": "1.0"
     *     } */
    VersionResponseBody: {
      /** @example 5cfa595 [2022-03-20T17:02:35Z] */
      appVersion: string;
      /** @example 1.0 */
      contractVersion: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  'info#/info/openapi3.yaml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File downloaded */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  'info#version': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['VersionResponseBody'];
        };
      };
    };
  };
  'nfd#searchV1': {
    parameters: {
      query?: {
        /**
         * @description An Algorand account address to find all NFDs owned by that address
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        owner?: string;
        /**
         * @description An Algorand account address to find all NFDs reserved for that address
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        reservedFor?: string;
        /** @description The start of an NFD name, fetching multiple NFDs that have that prefix - forces 'thumbnail' view ! */
        prefix?: string;
        /** @description Part of an NFD name, fetching multiple NFDs that have that substring (minimum 3 characters) - forces 'thumbnail' view ! */
        substring?: string;
        /**
         * @description Verified property name to search on - specify value with vvalue
         * @example email
         */
        vproperty?: 'discord' | 'telegram' | 'twitter' | 'email' | 'domain';
        /**
         * @description Value to find in the vproperty field specified with the vproperty parameter
         * @example Maxime laboriosam impedit modi molestias odit.
         */
        vvalue?: string;
        /** @description Whether returned NFDs (only in prefix/substring search) must have linked addresses (caAlgo) defined in order to be returned.  This is useful for callers wanting to lookup a name for the purposes of transferring assets to that NFD holder and they want to exclude names not linked for deposits. */
        requireAddresses?: boolean;
        /** @description Limit the number of results returned - max 240 */
        limit?: number;
        /** @description View of data to return, tiny (name, owner, caAlgo, unverifiedCaAlgo only), thumbnail (tiny + avatar), (brief (default), or full */
        view?: 'tiny' | 'thumbnail' | 'brief' | 'full';
        /** @example true */
        test00r?: boolean;
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Quas inventore a unde placeat accusantium. */
          ETag?: string;
          /** @example Ut accusamus. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdRecordCollection'];
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': unknown;
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#getNFD': {
    parameters: {
      query?: {
        /** @description View of data to return, tiny, brief (default), or full */
        view?: 'tiny' | 'brief' | 'full';
        /** @description Use if polling waiting for state change - causes notFound to return as 204 instead of 404.  Should only be used when waiting for an NFD to transition from not-existing to being reserved for user to claim */
        poll?: boolean;
        /** @description Set to true to return a never-cached result.  Use sparingly and only during certain 'NFD already exists' UX state transitions. */
        nocache?: boolean;
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path: {
        /** @example silvio.algo */
        nameOrID: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /**
           * @description ETag
           * @example Quia illum quo cupiditate error expedita corrupti.
           */
          ETag?: string;
          /**
           * @description Cache-Control header
           * @example Sunt quam.
           */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdRecord'];
        };
      };
      /** @description Polling, NFD not found */
      204: {
        headers: {
          /**
           * @description ETag
           * @example Fuga dignissimos minima est eaque fugit nihil.
           */
          ETag?: string;
          /**
           * @description Cache-Control header
           * @example Provident id saepe libero id voluptatibus explicabo.
           */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#activity': {
    parameters: {
      query: {
        /**
         * @description Name(s) of NFDs to fetch activity for.  Specify the same query parameter multiple times for each nane, ie: name=xxx&name=yyy&name=zzz")
         * @example [
         *       "silvio.algo"
         *     ]
         */
        name: string[];
        /**
         * @description type of activity to retrieve
         * @example changes
         */
        type?: 'changes';
        /**
         * @description Fetch events that occurred only after the specified time
         * @example 1994-10-04T14:30:19Z
         */
        afterTime?: string;
        /**
         * @description Limit the number of results returned, per NFD - max 50
         * @example 10
         */
        limit?: number;
        /**
         * @description What to sort on - descending timestamp is default
         * @example timeDesc
         */
        sort?: 'timeDesc' | 'timeAsc';
      };
      header?: {
        /**
         * @description etag
         * @example W/"d41d8cd98f00b204e9800998ecf8427e"
         */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Omnis est. */
          ETag?: string;
          /** @example Quasi dolores et nihil distinctio animi. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['NFDActivity']>;
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#getNFDsForAddresses': {
    parameters: {
      query: {
        /**
         * @description one or more addresses to look up, maximum of 20 can be defined.  Specify the same query parameter multiple times for each address, ie: address=xxx&address=yyy&address=zzz
         * @example [
         *       "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
         *       "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
         *     ]
         */
        address: string[];
        /** @description Limit the total number of NFDs returned in aggregate across all specified addresses (default 40, max 300) */
        limit?: number;
        /** @description View of data to return, tiny (name, owner, caAlgo, unverifiedCaAlgo only [default]), thumbnail (tiny + avatar), brief, or full */
        view?: 'tiny' | 'thumbnail' | 'brief' | 'full';
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Nobis et sint. */
          ETag?: string;
          /** @example Optio incidunt tempore et explicabo nobis voluptate. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdRecordCollection'];
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': unknown;
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example true
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example false
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example true
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#analytics': {
    parameters: {
      query?: {
        /**
         * @description name or partial match of NFD name to filter on
         * @example Qui qui deserunt placeat.
         */
        name?: string;
        /**
         * @description Buyer address to filter on
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        buyer?: string;
        /**
         * @description Seller address to filter on
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        seller?: string;
        /**
         * @description one or more events to filter on
         * @example [
         *       "minted",
         *       "postedOffer",
         *       "offeredForSale",
         *       "sold"
         *     ]
         */
        event?: Array<
          'minted' | 'offeredForSale' | 'canceledSale' | 'escrowedOffer' | 'sold' | 'postedOffer'
        >;
        /**
         * @description Whether the buyer property must be present in the data.  Setting this will exclude auction mint events for eg
         * @example false
         */
        requireBuyer?: boolean;
        /**
         * @description Whether to add a currentOwner property to each event with the 'current' owner of the NFD referenced by that event
         * @example false
         */
        includeOwner?: boolean;
        /**
         * @description Whether to exclude events where NFDomains is the seller.  If set to true, and filtering on 'sold' event for eg, returned items will will be secondary sales only.
         * @example true
         */
        excludeNFDAsSeller?: boolean;
        /** @example [
         *       "Ut eos aspernatur.",
         *       "Ut eos aspernatur."
         *     ] */
        category?: Array<'curated' | 'premium' | 'common'>;
        /** @example [
         *       "Ad veritatis nobis esse error pariatur veniam.",
         *       "Ad veritatis nobis esse error pariatur veniam.",
         *       "Ad veritatis nobis esse error pariatur veniam.",
         *       "Ad veritatis nobis esse error pariatur veniam."
         *     ] */
        saleType?: Array<'auction' | 'buyItNow'>;
        /**
         * @description Length of NFD
         * @example [
         *       "5_letters",
         *       "6_letters",
         *       "1_letters"
         *     ]
         */
        length?: Array<
          | '1_letters'
          | '2_letters'
          | '3_letters'
          | '4_letters'
          | '5_letters'
          | '6_letters'
          | '7_letters'
          | '8_letters'
          | '9_letters'
          | '10+_letters'
        >;
        /**
         * @description Traits of NFD
         * @example [
         *       "pristine",
         *       "segment",
         *       "segment"
         *     ]
         */
        traits?: Array<'emoji' | 'pristine' | 'segment'>;
        /**
         * @description The parent NFD Application ID to find. Used for fetching segments of an NFD
         * @example 1000000
         */
        parentAppID?: number;
        /**
         * @description Minimum price of NFD
         * @example 9101608840325971000
         */
        minPrice?: number;
        /**
         * @description Maximum price of NFD
         * @example 7721368210609847000
         */
        maxPrice?: number;
        /**
         * @description Fetch analytics events that occurred only after the specified time
         * @example 1986-05-21T01:06:19Z
         */
        afterTime?: string;
        /**
         * @description Limit the number of results returned - max 200
         * @example 50
         */
        limit?: number;
        /**
         * @description Starting document in large list.  Fetch 1-100 [limit 100], pass offset 100 to fetch 100-200
         * @example 7505853019475065000
         */
        offset?: number;
        /**
         * @description What to sort on - descending timestamp is default
         * @example priceAsc
         */
        sort?: 'timeDesc' | 'priceAsc' | 'priceDesc';
      };
      header?: {
        /**
         * @description etag
         * @example W/"d41d8cd98f00b204e9800998ecf8427e"
         */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Sunt porro distinctio qui nihil qui. */
          ETag?: string;
          /** @example Et in corrupti et soluta id. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NFDAnalyticRecords'];
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#getOpenAuctions': {
    parameters: {
      query?: {
        /**
         * @description NFD Name to restrict open auction list to
         * @example silvio.algo
         */
        name?: string;
        /**
         * @description Changes view to show those auctions starting in the next 6 days, or those currently running
         * @example true
         */
        startingSoon?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['NFDAuctionAndPrice']>;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#badges': {
    parameters: {
      query?: never;
      header?: {
        /**
         * @description etag
         * @example W/"d41d8cd98f00b204e9800998ecf8427e"
         */
        'if-none-match'?: string;
      };
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Voluptatem optio modi dicta suscipit enim delectus. */
          ETag?: string;
          /** @example Iure ut et facilis. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]:
              | Array<{
                  [key: string]: string | undefined;
                }>
              | undefined;
          };
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#browse': {
    parameters: {
      query?: {
        /** @description name or partial match of NFD name to filter on */
        name?: string;
        category?: Array<'curated' | 'premium' | 'common'>;
        saleType?: Array<'auction' | 'buyItNow'>;
        state?: Array<'reserved' | 'forSale' | 'owned'>;
        /**
         * @description The parent NFD Application ID to find. Used for fetching segments of an NFD
         * @example 1000000
         */
        parentAppID?: number;
        /** @description Length of NFD */
        length?: Array<
          | '1_letters'
          | '2_letters'
          | '3_letters'
          | '4_letters'
          | '5_letters'
          | '6_letters'
          | '7_letters'
          | '8_letters'
          | '9_letters'
          | '10+_letters'
        >;
        /** @description Traits of NFD */
        traits?: Array<'emoji' | 'pristine' | 'segment'>;
        /**
         * @description An Algorand account address to find all NFDs owned by that address
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        owner?: string;
        /**
         * @description An Algorand account address to find all NFDs reserved for that address
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        reservedFor?: string;
        /** @description The start of an NFD name, fetching multiple NFDs that have that prefix */
        prefix?: string;
        /** @description Part of an NFD name, fetching multiple NFDs that have that substring (minimum 3 characters) */
        substring?: string;
        /**
         * @description Verified property name to search on - specify value with vvalue
         * @example email
         */
        vproperty?: 'discord' | 'telegram' | 'twitter' | 'email' | 'domain';
        /**
         * @description Value to find in the vproperty field specified with the vproperty parameter
         * @example Deleniti eaque aliquid ex.
         */
        vvalue?: string;
        /** @description Minimum price of NFD */
        minPrice?: number;
        /** @description Maximum price of NFD */
        maxPrice?: number;
        /**
         * @description Fetch NFDs that changed after the specified timestamp
         * @example 2010-09-07T12:38:02Z
         */
        changedAfter?: string;
        /** @description Limit the number of results returned - max 200 */
        limit?: number;
        /** @description Starting document in large list.  Fetch 1-100 [limit 100], pass offset 100 to fetch 100-200 */
        offset?: number;
        /** @description What to sort on */
        sort?:
          | 'createdDesc'
          | 'timeChangedDesc'
          | 'soldDesc'
          | 'priceAsc'
          | 'priceDesc'
          | 'highestSaleDesc'
          | 'saleTypeAsc';
        /** @description View of data to return, tiny (name, owner, caAlgo, unverifiedCaAlgo only), brief (default), or full */
        view?: 'tiny' | 'brief' | 'full';
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Quod voluptates. */
          ETag?: string;
          /** @example Autem nisi aliquam. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdRecordCollection'];
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#consensusLeaders': {
    parameters: {
      query?: {
        /**
         * @description should it only match against accounts matching NFD linked addresses
         * @example false
         */
        requireNFD?: boolean;
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Temporibus sit corrupti cupiditate autem. */
          ETag?: string;
          /** @example Quia nisi. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['ConsensusRecord']>;
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#consensusMetrics': {
    parameters: {
      query?: never;
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Et molestiae. */
          ETag?: string;
          /** @example At distinctio. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]:
              | Array<{
                  [key: string]: string | undefined;
                }>
              | undefined;
          };
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#contractLock': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "lock": true,
         *       "sender": "LYBVJXSUG46QZQQKVCM7MOXHGGFGLYG2ZROZOFDSJQVWI73TNS2KFQDJZA"
         *     } */
        'application/json': components['schemas']['ContractLockRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#contractUpgrade': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "sender": "RC32Y4PLXJWU43IOLG6RIALACBNBAWIRGKHOUN7TBNHQ363LBU2RNHQQ4Q"
         *     } */
        'application/json': components['schemas']['RescindOfferRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#donations': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['Donation']>;
        };
      };
      /** @description Not Modified response. */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#donationLeaders': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Donation address to get leaderboard for
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['Donation']>;
        };
      };
      /** @description Not Modified response. */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#donationList': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['DonationAccount']>;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#escrowOffer': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "buyer": "RQF43A33PK7CPN2F2TGXFGTB3CN2JSGZQQ6HFRBBJDIJK7RRHT3XHJKFGY",
         *       "offer": 6979863769687
         *     } */
        'application/json': components['schemas']['EscrowOfferRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': unknown;
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#isValidNFD': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Application ID of a presumed NFD to verify.  The API will perform a forward-name lookup of the name within the NFD to verify it points to the same ID
         * @example 3905797978625861000
         */
        appID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IsValidNFDResponseBody'];
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#isValidASA': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Asset ID of a presumed NFD ASA to verify.  The API will verify the found asset references an NFD that in turn references that asset.
         * @example 2483832647711711000
         */
        asaID: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IsValidASAResponseBody'];
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#kickoff': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "buyer": "AZLXHFECX7MJY2JBCW3P7PEAPSADIPAZN24QWI6OG5OOEXPUMTNRTBLIO4",
         *       "name": "n2"
         *     } */
        'application/json': components['schemas']['KickoffRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description alreadyExists: NFD already exists */
      204: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example false
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example true
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example true
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description upgradeRequired: The NFD contract needs upgraded before this operation will be allowed */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': unknown;
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#linkAddress': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "address": [
         *         "6H2IUTEDF4KL57FUELGZ5AOLREQJ3ET75BFBVFT2XQJTCEZDZKY62LDEGI",
         *         "X7FYEJIOIE4LRYSFDISQPL6UDQIGIWCGBFDMW73KCOD5NNESDDVSOVPM6Y",
         *         "AWGLGDUVIYLINR557V64LL6QTZMHKQGFB33Q6TCTQN4OMQP5AFPVSTSEQM"
         *       ],
         *       "sender": "FAC6LV56CASJEEKGHDIZULM64SN6MXCV3EA3C35W3LMT7VLVREY4FVW4I4"
         *     } */
        'application/json': components['schemas']['LinkAddressRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description upgradeRequired: The NFD contract needs upgraded before this operation will be allowed */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#unlinkAddress': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "address": [
         *         "MPHOVW6TLG5JM46HBME43HHTZMISQRLFSO22IO3YUDFRAMDRRITFFX2UEI",
         *         "E4PIXLVMT7HTA4LWAZN7XQJ7J7KA75SYWFPIEAFEAZLK6G6ETGIB2NX55Y",
         *         "5Q6DOTU4PAVR2O4X4CJ2XEFKUPSK7NU2A2IHN3AJ6DNB6SGIWPVJASSKWA"
         *       ],
         *       "sender": "FGUSFZUECA653INMKYHCYXSUBSXSJQBG5SQTUDETQM7MFOQOSW6SU4O2GY"
         *     } */
        'application/json': components['schemas']['LinkAddressRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description upgradeRequired: The NFD contract needs upgraded before this operation will be allowed */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#setPrimaryAddress': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "address": "S5P65ZZDJ3FEWH5OVBGPXRQ45MHSGXWBKBEA4K45LD2TVLBWK72DZKHG6E",
         *       "sender": "UMMB7UW5BBKE7IMHGDUTDPZCVCY3W3YLBAGP3ZAPMCN4G5IJI3GEGD2YJY"
         *     } */
        'application/json': components['schemas']['SetPrimaryAddressRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description upgradeRequired: The NFD contract needs upgraded before this operation will be allowed */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#setPrimaryNFD': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "address": "XNLN3AFYCOKCOJJAOXFOZSRHI6NGN7OZKBBRVQQ677V7I4B7OXCCUETOJA",
         *       "sender": "Q34OG2WJPZLN7BXHEFY4JKTGB6ZH7BWTNHAMYZOVNQZCE2N3FQCC3SUSVA"
         *     } */
        'application/json': components['schemas']['SetPrimaryAddressRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description upgradeRequired: The NFD contract needs upgraded before this operation will be allowed */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#getLookup': {
    parameters: {
      query: {
        /**
         * @description one or more addresses (algo or otherwise) to look up, maximum of 20 can be defined.  Specify the same query parameter multiple times for each address, ie: address=xxx&address=yyy&address=zzz
         * @example [
         *       "Officia eligendi inventore error.",
         *       "Qui sequi ea.",
         *       "Laboriosam saepe at exercitationem magni."
         *     ]
         */
        address: string[];
        /** @description View of data to return, tiny (name, owner, caAlgo, unverifiedCaAlgo only [default]), thumbnail (tiny + avatar), brief, or full */
        view?: 'tiny' | 'thumbnail' | 'brief' | 'full';
        /**
         * @description Whether to allow unverified addresses to match (and only if its only match).  Defaults to false
         * @example true
         */
        allowUnverified?: boolean;
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Quod aut accusamus fugit a. */
          ETag?: string;
          /** @example Non perferendis et est. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: components['schemas']['NfdRecordinaddress'] | undefined;
          };
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': unknown;
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example false
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example false
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example true
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#getNameSig': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#offer': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "offer": 21460298663409,
         *       "payReceiver": true,
         *       "reservedFor": "QYQEKHF23LT25PWCWUOK7IPW3P76FYTKPYU3LSNQWSRA7LYLOEWIRTLRUY",
         *       "sender": "XB3IUSIRSJVU6UOUX5WXY2R7LZU7G5HPS76FPUYBQ55ZOFGIA4XX7PH6WU"
         *     } */
        'application/json': components['schemas']['OfferRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description upgradeRequired: The NFD contract needs upgraded before this operation will be allowed */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description tooManyTransactions: The number of transactions allowed in a single transaction group (16) have been exceeded.  Update fewer fields in one transaction, or if selling, reduce the data within the NFD first. */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#partnerKickoff': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "buyer": "JW75VW6VTTABUTGOMSUWV3Y6KMPWEJJJIA65U5BDK64FHW4SXLS7CHV4GY",
         *       "conveniencePct": 109226265072400130,
         *       "name": "o"
         *     } */
        'application/json': components['schemas']['PartnerKickoffRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description alreadyExists: NFD already exists */
      204: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example false
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example false
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example true
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description accessDenied: Unauthorized response. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description segmentNotSupported: parent segment isn't at contract version supporting segments */
      403: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example false
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example false
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example false
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#postOfferToOwner': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "note": "z3z",
         *       "offer": 36949134009288,
         *       "sender": "3LLN7G5CAQ5QDVU5NOE7E4KLCAJDU7S3BPSM5TTUS4AJTVOO4VTXSRDTR4"
         *     } */
        'application/json': components['schemas']['PostOfferToOwnerRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#purchase': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "buyer": "4NQMINZORMXABC3NMX6G4R7GJSZQGCQ73IACKYEHTBPHOGQCRVZ7SOOH4U",
         *       "offer": 49308761784215,
         *       "rejectNFT": false
         *     } */
        'application/json': components['schemas']['PurchaseRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': unknown;
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#rescindOffer': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "sender": "QVM7IAJSLUJGU6RKC3MRTPF6D53AKBLP7EG2YEF6H2FPNQHBWJ4A2KAAAU"
         *     } */
        'application/json': components['schemas']['RescindOfferRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#getRevAddressSig': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#segmentLeaders': {
    parameters: {
      query?: never;
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Dignissimos ipsam. */
          ETag?: string;
          /** @example Maiores officia unde molestias sed aut eos. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdRecordCollection'];
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#segmentLock': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "lock": false,
         *       "sellAmount": 37029249,
         *       "sender": "R5OZ2ZBI6TELJWAWFW2RBJ2ZDAJZ5YFOHM4DAF73VELYTC7M3EFV52Y2LA"
         *     } */
        'application/json': components['schemas']['SegmentLockRequestBody'];
      };
    };
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description segmentPriceTooLow: segment price doesn't meet minimum required price */
      403: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example true
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example true
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example false
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#segmentPrice': {
    parameters: {
      query: {
        /**
         * @description Expected buyer of segment
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        buyer: string;
      };
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SegmentPriceResponseBody'];
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description segmentNotSupported: parent segment isn't at contract version supporting segments */
      403: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example true
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example true
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example true
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#suggest': {
    parameters: {
      query?: {
        /**
         * @description Limit the number of results returned - max 40
         * @example 20
         */
        limit?: number;
        /**
         * @description View of data to return, brief (default), or full
         * @example brief
         */
        view?: 'brief' | 'full';
        /**
         * @description Expected buyer of name.  Used for segment minting as additional check on availability of mint
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        buyer?: string;
      };
      header?: never;
      path: {
        /**
         * @description A name (even partial) to search for [receiving suggestions as well]
         * @example c9s
         */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdRecordCollection'];
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description segmentNotSupported: parent segment isn't at contract version supporting segments */
      403: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example false
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example false
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example false
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#totals': {
    parameters: {
      query?: never;
      header?: {
        /**
         * @description etag
         * @example W/"d41d8cd98f00b204e9800998ecf8427e"
         */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Et et aut dignissimos neque ipsum. */
          ETag?: string;
          /** @example Occaecati nihil. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TotalsOKResponseBody'];
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#twitterLeaders': {
    parameters: {
      query?: never;
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Repellendus quod consectetur. */
          ETag?: string;
          /** @example Beatae est omnis excepturi ut hic enim. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['TwitterRecord']>;
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#updateAll': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "properties": {
         *         "internal": {
         *           "Nostrum eius.": "Aliquid dolor sint sint quidem maiores corporis.",
         *           "Sint aut qui sit doloribus qui illum.": "Est alias similique."
         *         },
         *         "userDefined": {
         *           "c": "Recusandae excepturi est qui libero dicta maxime.",
         *           "ca.m": "Modi nihil quis dolorem.",
         *           "r": "Quod quasi ipsum labore hic quaerat."
         *         },
         *         "verified": {
         *           "xzr": "Et excepturi."
         *         }
         *       },
         *       "sender": "VYNMPSYLJE4H7P6LB674V6CFOGV76WHXDPNTTFMIX4MOCDXTMNWRE6UVVE"
         *     } */
        'application/json': components['schemas']['UpdatePartialRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description invalidFieldSet: You can only set user-defined properties, or clear verified properties */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description tooManyTransactions: The number of transactions allowed in a single transaction group (16) have been exceeded.  Update fewer fields in one transaction, or if selling, reduce the data within the NFD first. */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#updatePartial': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "properties": {
         *         "internal": {
         *           "Nostrum eius.": "Aliquid dolor sint sint quidem maiores corporis.",
         *           "Sint aut qui sit doloribus qui illum.": "Est alias similique."
         *         },
         *         "userDefined": {
         *           "c": "Recusandae excepturi est qui libero dicta maxime.",
         *           "ca.m": "Modi nihil quis dolorem.",
         *           "r": "Quod quasi ipsum labore hic quaerat."
         *         },
         *         "verified": {
         *           "xzr": "Et excepturi."
         *         }
         *       },
         *       "sender": "BTDDKEI7JIPJQ2LJUX6SGTABPAVABYM2NEQHK4FRIXT5BPYNMY3NR2D6WA"
         *     } */
        'application/json': components['schemas']['UpdatePartialRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description invalidFieldSet: You can only set user-defined properties, or clear verified properties */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description tooManyTransactions: The number of transactions allowed in a single transaction group (16) have been exceeded.  Update fewer fields in one transaction, or if selling, reduce the data within the NFD first. */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#updateImage': {
    parameters: {
      query?: {
        /**
         * @description Whether to return transactions to sign to update the specified image attribute within the NFD
         * @example false
         */
        wantTxn?: boolean;
      };
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
        /**
         * @description Address that will be signing the returned transactions.  Should be owner of NFD
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        sender: string;
        /**
         * @description Which image to update, avatar or banner
         * @example avatar
         */
        which: 'avatar' | 'banner';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description upgradeRequired: The NFD contract needs upgraded before this operation will be allowed */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description imageTooLarge: Images must be <10 Megabytes in size */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#getNFDsForAddressesV2': {
    parameters: {
      query: {
        /**
         * @description one or more addresses (algo or otherwise) to look up, maximum of 20 can be defined.  Specify the same query parameter multiple times for each address, ie: address=xxx&address=yyy&address=zzz
         * @example [
         *       "Occaecati laudantium voluptatum repudiandae molestiae velit aut."
         *     ]
         */
        address: string[];
        /** @description Limit the total number of NFDs returned - automatically changed to at least be 1 per address */
        limit?: number;
        /** @description View of data to return, tiny (name, owner, caAlgo, unverifiedCaAlgo only [default]), thumbnail (tiny + avatar), brief, or full */
        view?: 'tiny' | 'thumbnail' | 'brief' | 'full';
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Qui ducimus libero explicabo eaque fuga odio. */
          ETag?: string;
          /** @example Quo eos est deserunt delectus pariatur possimus. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: components['schemas']['NfdRecordinaddressCollection'] | undefined;
          };
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': unknown;
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example true
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example false
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example false
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#donationLeadersV2': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Array<components['schemas']['Donation']>;
        };
      };
      /** @description Not Modified response. */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#donationListV2': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdRecordResponseFullCollection'];
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#searchV2': {
    parameters: {
      query?: {
        /** @description name or partial match of NFD name to filter on */
        name?: string;
        category?: Array<'curated' | 'premium' | 'common'>;
        saleType?: Array<'auction' | 'buyItNow'>;
        state?: Array<'reserved' | 'forSale' | 'owned'>;
        /**
         * @description The parent NFD Application ID to find. Used for fetching segments of an NFD
         * @example 1000000
         */
        parentAppID?: number;
        /** @description Length of NFD */
        length?: Array<
          | '1_letters'
          | '2_letters'
          | '3_letters'
          | '4_letters'
          | '5_letters'
          | '6_letters'
          | '7_letters'
          | '8_letters'
          | '9_letters'
          | '10+_letters'
        >;
        /** @description Traits of NFD */
        traits?: Array<'emoji' | 'pristine' | 'segment'>;
        /**
         * @description An Algorand account address to find all NFDs owned by that address
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        owner?: string;
        /**
         * @description An Algorand account address to find all NFDs reserved for that address
         * @example 4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU
         */
        reservedFor?: string;
        /** @description Should NFDs reserved for an account (transfers for example or unclaimed winning auctions) be excluded */
        excludeUserReserved?: boolean;
        /** @description The start of an NFD name, fetching multiple NFDs that have that prefix */
        prefix?: string;
        /** @description Part of an NFD name, fetching multiple NFDs that have that substring (minimum 3 characters) */
        substring?: string;
        /**
         * @description Verified property name to search on - specify value with vvalue
         * @example discord
         */
        vproperty?:
          | 'discord'
          | 'telegram'
          | 'twitter'
          | 'github'
          | 'email'
          | 'domain'
          | 'nostrpubkey';
        /**
         * @description Value to find in the vproperty field specified with the vproperty parameter
         * @example Nulla est maxime cumque exercitationem quidem.
         */
        vvalue?: string;
        /**
         * @description Whether to explicitly filter on segments being locked or unlocked.  Typically only valuable when filtering on unlocked
         * @example false
         */
        segmentLocked?: boolean;
        /**
         * @description Whether to explicitly filter on NFD roots or segments.  True to only see roots, False to only see segments.
         * @example false
         */
        segmentRoot?: boolean;
        /** @description Minimum price of NFD */
        minPrice?: number;
        /** @description Maximum price of NFD */
        maxPrice?: number;
        /** @description Minimum price of NFD Segment in USD (cents) */
        minPriceUsd?: number;
        /** @description Maximum price of NFD Segment in USD (cents) */
        maxPriceUsd?: number;
        /**
         * @description Fetch NFDs that changed after the specified timestamp
         * @example 1998-01-13T19:25:36Z
         */
        changedAfter?: string;
        /** @description Limit the number of results returned - max 200 */
        limit?: number;
        /** @description Starting document in large list.  Fetch 1-100 [limit 100], pass offset 100 to fetch 100-200 */
        offset?: number;
        /** @description What to sort on */
        sort?:
          | 'createdDesc'
          | 'timeChangedDesc'
          | 'soldDesc'
          | 'priceAsc'
          | 'priceDesc'
          | 'highestSaleDesc'
          | 'saleTypeAsc'
          | 'nameAsc';
        /** @description View of data to return, tiny (name, owner, caAlgo, unverifiedCaAlgo only), brief (default), or full */
        view?: 'tiny' | 'thumbnail' | 'brief' | 'full';
      };
      header?: {
        /** @description etag */
        'if-none-match'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          /** @example Id dolores voluptatem. */
          ETag?: string;
          /** @example A omnis deserunt. */
          'cache-control'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NfdV2SearchRecords'];
        };
      };
      /** @description ETag not changed */
      304: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#vaultOptInLock': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "lock": false,
         *       "reLockAt": "1994-01-02T22:07:46Z",
         *       "sender": "FXBJO2U4RD6WEU2YPGASNPQ3RP37WMJUPLSLJ4X4KNTHR7P3MKSZTFKNRE"
         *     } */
        'application/json': components['schemas']['VaultOptInLockRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#sendFromVault': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "amount": 65162016795150,
         *       "assets": [
         *         17851005003390462000,
         *         615349748551838800
         *       ],
         *       "note": "maa",
         *       "receiver": "Qui dolorem nulla totam error sit eligendi.",
         *       "receiverCanSign": true,
         *       "receiverType": "account",
         *       "sender": "DNFJQE35WPI6KVQHEQVY6SAC24MAJE5HK7N4HM7KFONPQUCW4NN6NXNRJM"
         *     } */
        'application/json': components['schemas']['SendFromVaultRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description vaultLocked: the target vault is locked, doesn't already have this asset, and won't accept it */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#sendToVault': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example silvio.algo */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "amount": 9678084800744,
         *       "assets": [
         *         10281858471555801000
         *       ],
         *       "note": "g1a",
         *       "optInOnly": true,
         *       "sender": "3E24WUH7CJTZQW2WRJQ2ONBS7CSMPWMOFWUI5N2L6KSUEZ2PZTTA2Z7KTA"
         *     } */
        'application/json': components['schemas']['SendToVaultRequestBody'];
      };
    };
    responses: {
      /** @description Returns (as escaped string) array of paired values representing a transaction group to submit to an Algorand node. u or s for unsigned or signed, followed by the base64-encoded message-pack of an unsigned transaction (to be signed by sender/buyer) or a signed transaction to be submitted as-is. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description vaultLocked: the vault is locked, doesn't already have this asset, and won't accept it */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description tooManyTransactions: The number of transactions allowed in a single transaction group (16) have been exceeded. */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#verifyConfirm': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of challenge, must be used in subsequent confirmation call
         * @example Facilis esse blanditiis magni omnis consectetur.
         */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "challenge": "Nihil corrupti libero unde cum quis dolores."
         *     } */
        'application/json': components['schemas']['VerifyConfirmRequestBody'];
      };
    };
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['VerifyConfirmResponseBody'];
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description noNFDNSubscription: No active subscription to NFDN */
      403: {
        headers: {
          /**
           * @description Is the error a server-side fault?
           * @example false
           */
          'goa-attribute-fault'?: boolean;
          /**
           * @description ID is a unique identifier for this particular occurrence of the problem.
           * @example 123abc
           */
          'goa-attribute-id'?: string;
          /**
           * @description Message is a human-readable explanation specific to this occurrence of the problem.
           * @example parameter 'p' must be an integer
           */
          'goa-attribute-message'?: string;
          /**
           * @description Name is the name of this class of errors.
           * @example bad_request
           */
          'goa-attribute-name'?: string;
          /**
           * @description Is the error temporary?
           * @example true
           */
          'goa-attribute-temporary'?: boolean;
          /**
           * @description Is the error a timeout?
           * @example false
           */
          'goa-attribute-timeout'?: boolean;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
  'nfd#verifyRequest': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "fieldToVerify": "banner",
         *       "name": "2qe",
         *       "sender": "KQXN472QFR3OFG3KPJHZKKJZUIMTDLVYSTFQNKBBBWWZNY2DW5HQLPVATE"
         *     } */
        'application/json': components['schemas']['VerifyRequestRequestBody'];
      };
    };
    responses: {
      /** @description OK response. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['VerifyRequestResponseBody'];
        };
      };
      /** @description invalidAddress: invalidAddress is returned for an Algorand address that doesn't appear to be valid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description notFound: Not Found response. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/vnd.goa.error': components['schemas']['Error'];
        };
      };
      /** @description rateLimited: Too Many Requests response. */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimited'];
        };
      };
    };
  };
}
